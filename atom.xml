<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ouertani Blog]]></title>
  <link href="http://ouertani.github.com/atom.xml" rel="self"/>
  <link href="http://ouertani.github.com/"/>
  <updated>2013-03-31T19:14:23+02:00</updated>
  <id>http://ouertani.github.com/</id>
  <author>
    <name><![CDATA[Ouertani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rest with Scala and Vert.x]]></title>
    <link href="http://ouertani.github.com/blog/2013/03/09/rest-with-scala-and-vert-dot-x/"/>
    <updated>2013-03-09T00:24:00+01:00</updated>
    <id>http://ouertani.github.com/blog/2013/03/09/rest-with-scala-and-vert-dot-x</id>
    <content type="html"><![CDATA[<p>A previous post introduced some features of using Scala with <a href="http://vertx.io/">Vert.x</a>. This post covers how to publish Rest web services in an elegant and simple fashion.</p>

<p>As in the previous post, Examples in Java and Scala are presented, source code been hosted on GitHub as part of lang-scala <a href="https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala">https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala</a></p>

<!-- more -->




<h2>I- Resticle</h2>


<p>Resticle is a unit of deployment dedicated to Rest. It provides a new method (“handles”) which can be used by Vert.x to start Rest services. “handles” returns a sequence of rest handlers :</p>

<ul>
<li>RestHandler : Action => Response</li>
<li><ul>Action :
<li>GET(pattern : String)</li>
<li>POST (pattern : String)</li>
<li>PUT (pattern : String)</li>
<li>DELETE(pattern : String)</li>
<li>HEAD (pattern : String)</li>
<li>ALL(pattern : String)</li>
</ul></li>
<li>Response : HttpServerRequest => Any</li>
<li>OK, Unauthorized,&#8230;.</li>
</ul>


<p>In this tutorial we will be working with the SampleResticle class, for both scala and java.</p>

<h2>II - Hello World</h2>


<p>Vert.x provides a powerful routing and <a href="http://vertx.io/core_manual_java.html#routing-http-requests-with-pattern-matching">route matching</a> mechanism, which simplifies the routing of HTTP requests to different handlers based on pattern matching on the request path.</p>

<p>In Hello World snippet, let us publish a static GET service :</p>

<p><li>GET : /hello → code : 200 , body : world</li></p>

<h4>Scala</h4>




<figure class='code'><figcaption><span>SampleResticle.scala   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">SampleResticle</span> <span class="k">extends</span> <span class="nc">Resticle</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">handles</span> <span class="k">=</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>      <span class="o">:&gt;</span>  <span class="nc">OK</span><span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;world &quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Java</h4>


<p></p>

<figure class='code'><figcaption><span>SampleResticle.java            </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleResticle</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RouteMatcher</span> <span class="n">routeMatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RouteMatcher</span><span class="o">();</span>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;world&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="n">routeMatcher</span><span class="o">).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>III- Chaining Handlers</h2>


<p>Using Resticle we can chain handlers quit easily. The following snippets create static GET and DELETE services :</p>

<p><li>GET : /hello → code : 200 , body : world</li>
<li>DELETE : /posts → code : 401 , body : Not allowed user</li></p>

<h4>Scala</h4>




<figure class='code'><figcaption><span>SampleResticle.scala               </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">SampleResticle</span> <span class="k">extends</span> <span class="nc">Resticle</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">handles</span> <span class="k">=</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>      <span class="o">:&gt;</span>  <span class="nc">OK</span><span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;world &quot;</span><span class="o">)</span> <span class="o">}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">DELETE</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">)</span>   <span class="o">:&gt;</span>  <span class="nc">Unauthorized</span> <span class="o">{</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;Not allowed user&quot;</span> <span class="o">}}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>java</h4>




<figure class='code'><figcaption><span>SampleResticle.java                </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleResticle</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RouteMatcher</span> <span class="n">routeMatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RouteMatcher</span><span class="o">();</span>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;world&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">401</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;Not allowed user&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="n">routeMatcher</span><span class="o">).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>IV - Value path</h2>


<p>Vert.x <a href="http://vertx.io/core_manual_java.html#routing-http-requests-with-pattern-matching">pattern matching</a> lets you extract values from the path and use them as parameters in the request.</p>

<p><li>GET : /hello → code : 200 , body : world</li>
<li>DELETE : /posts → code : 401 , body : Not allowed user</li>
<li>POST : /:blogname → code : 200 , body : post {blogname} received !</li></p>

<h4>Scala : ( Using <a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">String interpolation</a>)</h4>




<figure class='code'><figcaption><span>SampleResticle.scala               </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">SampleResticle</span> <span class="k">extends</span> <span class="nc">Resticle</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">handles</span> <span class="k">=</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>      <span class="o">:&gt;</span>  <span class="nc">OK</span><span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;world &quot;</span><span class="o">)</span> <span class="o">}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">DELETE</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">)</span>   <span class="o">:&gt;</span>  <span class="nc">Unauthorized</span> <span class="o">{</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;Not allowed user&quot;</span> <span class="o">}}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">POST</span><span class="o">(</span><span class="s">&quot;/:blogname&quot;</span><span class="o">)</span> <span class="o">:&gt;</span>  <span class="nc">OK</span> <span class="o">{</span><span class="n">req</span>  <span class="k">=&gt;</span> <span class="k">val</span> <span class="n">param</span> <span class="k">=</span> <span class="n">req</span><span class="o">.</span><span class="n">params</span><span class="o">().</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;blogname&quot;</span><span class="o">)</span> <span class="o">;</span> <span class="n">s</span><span class="s">&quot;post $param received !&quot;</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Java</h4>




<figure class='code'><figcaption><span>SampleResticle.java                </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleResticle</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RouteMatcher</span> <span class="n">routeMatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RouteMatcher</span><span class="o">();</span>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;world&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">401</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;Not allowed user&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">&quot;/:blogname&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">blogName</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">params</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;blogname&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;post &quot;</span><span class="o">+</span><span class="n">blogName</span><span class="o">+</span> <span class="s">&quot; received !&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="n">routeMatcher</span><span class="o">).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>V- Json</h2>


<p>Let’s assume we have a Blog class with two String fields title and content :</p>

<p>case class Blog (title :String , content : String)
The java equivalent has been relocated to the end of the document due to its verbosity ;).</p>

<p>Publishing an object using Resticle is simple and transparent due to implicit convertor : T => Buffer.</p>

<h4>Scala ( Type Class)</h4>


<figure class='code'><figcaption><span>Blog.scala </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Blog</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">def</span> <span class="n">toBuffer</span><span class="o">(</span><span class="n">blog</span> <span class="k">:</span> <span class="kt">Blog</span><span class="o">)</span><span class="k">:</span><span class="kt">Buffer</span> <span class="o">=</span> <span class="nc">JsonObject</span><span class="o">.</span><span class="n">withString</span><span class="o">(</span><span class="s">&quot;title&quot;</span> <span class="o">-&gt;</span> <span class="n">blog</span><span class="o">.</span><span class="n">title</span><span class="o">).</span><span class="n">withString</span><span class="o">(</span><span class="s">&quot;content&quot;</span> <span class="o">-&gt;</span> <span class="n">blog</span><span class="o">.</span><span class="n">content</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Java ( with explicit convertor )</h4>




<figure class='code'><figcaption><span>Convertor.java             </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Convertor</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span>  <span class="n">JsonObject</span> <span class="nf">toJson</span><span class="o">(</span><span class="n">Blog</span> <span class="n">blog</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="k">new</span> <span class="nf">JsonObject</span><span class="o">().</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="n">blog</span><span class="o">.</span><span class="na">getTitle</span><span class="o">()).</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;content&quot;</span><span class="o">,</span> <span class="n">blog</span><span class="o">.</span><span class="na">getContent</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><li>GET : /hello → code : 200 , body : world</li>
<li>DELETE : /posts → code : 401 , body : Not allowed user</li>
<li>POST : /:blogname → code : 200 , body : post {blogname} received !</li>
<li>GET : /:id → code : 200 , body : {&#8220;title&#8221;:&#8221;rest&#8221;,&#8221;content&#8221;:&#8221;scala &amp; vertx&#8221;}</li></p>

<h4>Scala</h4>




<figure class='code'><figcaption><span>SampleResticle.scala               </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">SampleResticle</span> <span class="k">extends</span> <span class="nc">Resticle</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">handles</span> <span class="k">=</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>      <span class="o">:&gt;</span>  <span class="nc">OK</span><span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;world &quot;</span><span class="o">)</span> <span class="o">}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">DELETE</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">)</span>   <span class="o">:&gt;</span>  <span class="nc">Unauthorized</span> <span class="o">{</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;Not allowed user&quot;</span> <span class="o">}}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">POST</span><span class="o">(</span><span class="s">&quot;/:blogname&quot;</span><span class="o">)</span> <span class="o">:&gt;</span>  <span class="nc">OK</span> <span class="o">{</span><span class="n">req</span>  <span class="k">=&gt;</span> <span class="k">val</span> <span class="n">param</span> <span class="k">=</span> <span class="n">req</span><span class="o">.</span><span class="n">params</span><span class="o">().</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;blogname&quot;</span><span class="o">)</span> <span class="o">;</span> <span class="n">s</span><span class="s">&quot;post $param received !&quot;</span> <span class="o">}</span> <span class="o">}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/:id&quot;</span><span class="o">)</span>        <span class="o">:&gt;</span>  <span class="nc">OK</span> <span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">Blog</span><span class="o">(</span><span class="s">&quot;rest&quot;</span><span class="o">,</span><span class="s">&quot;scala &amp; vertx&quot;</span><span class="o">))}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Java</h4>




<figure class='code'><figcaption><span>SampleResticle.java                </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleResticle</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RouteMatcher</span> <span class="n">routeMatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RouteMatcher</span><span class="o">();</span>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;world&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">401</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;Not allowed user&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">&quot;/:blogname&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">blogName</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">params</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;blogname&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;post &quot;</span><span class="o">+</span><span class="n">blogName</span><span class="o">+</span> <span class="s">&quot; received !&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/:id&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">Blog</span> <span class="n">blog</span> <span class="o">=</span>  <span class="k">new</span> <span class="n">Blog</span><span class="o">(</span><span class="s">&quot;rest&quot;</span><span class="o">,</span><span class="s">&quot;scala &amp; vertx&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">JsonObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">Convertor</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">blog</span><span class="o">);</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="n">obj</span><span class="o">.</span><span class="na">encode</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="n">routeMatcher</span><span class="o">).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java Blog</p>

<figure class='code'><figcaption><span>Blog.java              </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Blog</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span>  <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Blog</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>


<p>Despite the fact that Resticle is in first development step, Rest support is by far simpler and elegant in scala than in java. As described in first tutorial Vert.x java version is burdened with a frightening number of handlers. Will Vert.x 2.0 address this point using <a href="https://github.com/vert-x/vert.x/wiki/Vert.x-2.0-plan">Promises/Deferred APIs </a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with Scala and Vert.x]]></title>
    <link href="http://ouertani.github.com/blog/2013/02/12/fun-with-scala-and-vert-dot-x/"/>
    <updated>2013-02-12T18:43:00+01:00</updated>
    <id>http://ouertani.github.com/blog/2013/02/12/fun-with-scala-and-vert-dot-x</id>
    <content type="html"><![CDATA[<p><a href="http://vertx.io/">Vert.x</a> is a polyglot event-driven application framework that runs on the Java Virtual Machine (JAVA 7 is the minimum supported version). Like Node.js, Vert.x is asynchronous and scalable, and lets developers build modern and effective web applications.</p>

<p>Being polyglot, Vert.x can be used in many flavors, among which : JavaScript,CoffeeScript, Ruby, Python,Groovy and Java. In order to enforce asynchronism and scalabity, Vert.x is built upon <a href="https://netty.io/">Netty</a>, leverage the <a href="http://en.wikipedia.org/wiki/Reactor_pattern">reactor pattern</a>, using a frightening number of handlers.</p>

<p>This article aims at showing the powerful combination of Scala and Vert.x - the Java counterpart being provided as comparison.</p>

<p>Note : the source code are hosted on GitHub as part of lang-scala <a href="https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala">https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala</a></p>

<p>Vert.x supports many components :</p>

<p><li><a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a></li>
<li>HttpServer</li>
<li>Distributed Event Bus</li>
<li>TCP Server, SockJS ,&#8230; not presented here</li></p>

<h2>I - WebSocket</h2>


<p>Web Socket are HTML 5 feature providing full-duplex communications. For old browsers that do not support WebSocket, Vert.x provides <a href="https://github.com/sockjs/sockjs-client">SockJS</a> as out-of-the-box component.</p>

<p>In order to run the following example check out : <a href="https://github.com/ouertani/vert.x/blob/master/vertx-examples/src/main/javascript/websockets/ws.html">https://github.com/ouertani/vert.x/blob/master/vertx-examples/src/main/javascript/websockets/ws.html</a> and save it into the compiled lib directory</p>

<h4>Java</h4>


<figure class='code'><figcaption><span>SampleWebSocket.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.buffer.Buffer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpServerRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.ServerWebSocket</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.deploy.Verticle</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleWebSocket</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">().</span><span class="na">websocketHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">ServerWebSocket</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="kd">final</span> <span class="n">ServerWebSocket</span> <span class="n">ws</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">ws</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;/myapp&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ws</span><span class="o">.</span><span class="na">dataHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Buffer</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">ws</span><span class="o">.</span><span class="na">writeTextFrame</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span> <span class="c1">// Echo it back</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>          <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ws</span><span class="o">.</span><span class="na">reject</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">requestHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">))</span> <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">sendFile</span><span class="o">(</span><span class="s">&quot;ws.html&quot;</span><span class="o">);</span> <span class="c1">// Serve the html</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scala</h4>


<figure class='code'><figcaption><span>SampleWebSocket.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.vertx.java.core.buffer.Buffer</span><span class="o">;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.java.core.http.HttpServerRequest</span><span class="o">;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.java.core.http.ServerWebSocket</span><span class="o">;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.deploy.Verticle</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.core._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SampleWebSocket</span> <span class="k">extends</span> <span class="nc">Verticle</span> <span class="o">(</span>
</span><span class='line'>  <span class="k">_</span><span class="o">.</span><span class="n">getVertx</span><span class="o">().</span><span class="n">createHttpServer</span><span class="o">().</span><span class="n">websocketHandler</span><span class="o">{</span>
</span><span class='line'>     <span class="n">ws</span><span class="k">:</span><span class="kt">ServerWebSocket</span> <span class="o">=&gt;</span> <span class="n">ws</span><span class="o">.</span><span class="n">path</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;/myapp&quot;</span> <span class="k">=&gt;</span> <span class="n">ws</span><span class="o">.</span><span class="n">dataHandler</span><span class="o">{</span><span class="n">data</span> <span class="k">:</span> <span class="kt">Buffer</span> <span class="o">=&gt;</span>   <span class="n">ws</span><span class="o">.</span><span class="n">writeTextFrame</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="n">toString</span><span class="o">())}</span>
</span><span class='line'>        <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">ws</span><span class="o">.</span><span class="n">reject</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}}</span>
</span><span class='line'>      <span class="o">.</span><span class="n">requestHandler</span><span class="o">{</span><span class="n">req</span> <span class="k">:</span> <span class="kt">HttpServerRequest</span> <span class="o">=&gt;</span> <span class="n">req</span><span class="o">.</span><span class="n">path</span> <span class="k">match</span> <span class="o">{</span><span class="k">case</span> <span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">req</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">sendFile</span><span class="o">(</span><span class="s">&quot;ws.html&quot;</span><span class="o">)}}</span>
</span><span class='line'>      <span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">)</span>
</span><span class='line'><span class="o">)()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>II-HttpWebServer</h2>


<p>Vert.x allows you to easily write full featured, highly performant and scalable HTTP and HTTPS servers.</p>

<p>The following example starts up an Http server, listening on port 8080, and logging all received requests.</p>

<h4>Java</h4>


<figure class='code'><figcaption><span>SampleHttpWebServer.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpServer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpServerRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.logging.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.deploy.Verticle</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleHttpWebServer</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">getContainer</span><span class="o">().</span><span class="na">getLogger</span><span class="o">();</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;A request has arrived on the server!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scala</h4>


<figure class='code'><figcaption><span>SampleWebServer.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.vertx.java.core.http.</span> <span class="o">{</span> <span class="nc">HttpServerRequest</span> <span class="k">=&gt;</span> <span class="nc">JHttpServerRequest</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.deploy.Verticle</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.core._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SampleWebServer</span> <span class="k">extends</span> <span class="nc">Verticle</span> <span class="o">(</span> <span class="n">x</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">getVertx</span><span class="o">().</span><span class="n">createHttpServer</span><span class="o">().</span><span class="n">withRequestHandler</span><span class="o">{</span><span class="k">_</span> <span class="k">:</span> <span class="kt">JHttpServerRequest</span> <span class="o">=&gt;</span>
</span><span class='line'>     <span class="n">x</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;A request has arrived on the server!&quot;</span><span class="o">)}</span>
</span><span class='line'><span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>III-HttpClient</h2>


<p>Vert.x also provides an HttpClient API, so as to interact with the server part. The following samples create and send a GET request, then log the server&#8217;s response.</p>

<h4>Java</h4>


<figure class='code'><figcaption><span>SampleHttpClient.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpClientRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpClientResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.logging.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.deploy.Verticle</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleHttpClient</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpClient</span><span class="o">().</span><span class="na">setHost</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">getContainer</span><span class="o">().</span><span class="na">getLogger</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">HttpClientRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">&quot;/some-path/&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpClientResponse</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpClientResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Got a response: &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">end</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scala</h4>


<figure class='code'><figcaption><span>SampleWebClient.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.deploy.Verticle</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.core._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SampleWebClient</span> <span class="k">extends</span> <span class="nc">Verticle</span> <span class="o">(</span><span class="n">v</span> <span class="k">=&gt;</span>
</span><span class='line'>   <span class="n">v</span><span class="o">.</span><span class="n">getVertx</span><span class="o">.</span><span class="n">createHttpClient</span><span class="o">().</span><span class="n">setHost</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">).</span><span class="n">setPort</span><span class="o">(</span><span class="mi">8080</span><span class="o">)</span>
</span><span class='line'>   <span class="o">.</span><span class="n">andGetNow</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span> <span class="o">{</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="n">v</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;Got a response: &quot;</span> <span class="o">)}</span>
</span><span class='line'>  <span class="o">)()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>IV-EventBus</h2>


<p>The event bus is like a vertebral spine, it can be used to connect distributed nodes, and to support interaction between different Verticles, even written in different languages.</p>

<h4>Java</h4>


<figure class='code'><figcaption><span>SampleEventBus.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.deploy.Verticle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.eventbus.EventBus</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleEventBus</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">EventBus</span> <span class="n">eb</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">eventBus</span><span class="o">();</span>
</span><span class='line'>       <span class="n">eb</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;path&quot;</span><span class="o">,</span> <span class="s">&quot;ping1&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="n">eb</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;path&quot;</span><span class="o">,</span> <span class="s">&quot;ping2&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scala</h4>


<figure class='code'><figcaption><span>SampleEventBus.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.deploy.Verticle</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.core._</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SampleEventBus</span> <span class="k">extends</span> <span class="nc">Verticle</span> <span class="o">(</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'> <span class="k">val</span>  <span class="n">point</span> <span class="k">=</span> <span class="n">x</span> <span class="o">!</span> <span class="o">(</span><span class="s">&quot;path&quot;</span><span class="o">)</span>
</span><span class='line'> <span class="n">point</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="s">&quot;ping 1&quot;</span><span class="o">)</span>
</span><span class='line'> <span class="n">point</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="s">&quot;ping 2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">)()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>


<p>This article introduced the basic of Vert.x using scala language and short examples. Full Scala language support will soon, hopefully, become available.</p>

<p>Stay tuned, a subsequent post will show you more about Vert.x with Scala.</p>

<p>source : http://blog.zenika.com/index.php?post/2013/02/11/fun-with-scala-and-vert-x</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play 2.1 Scala 2.10 and String Interpolation]]></title>
    <link href="http://ouertani.github.com/blog/2012/10/18/getting-started-with-play-2-dot-1/"/>
    <updated>2012-10-18T19:00:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2012/10/18/getting-started-with-play-2-dot-1</id>
    <content type="html"><![CDATA[<p>Play Roadmap has been <a href="https://docs.google.com/document/d/1OEt6gZ3a-daSkNXqXGAM4jBs5LtuDkLZIzsWN9aeM1g/preview?sle=true">published</a>. The major feature will be the support of <a href="http://www.scala-lang.org/">scala 2.10</a> version.</p>

<p>By using <a href="http://www.playframework.org/">Play 2.1</a> we can start profiting with <a href="https://docs.google.com/document/d/1NdxNxZYodPA-c4MLr33KzwzKFkzm9iW9POexT9PkJsU/edit">String interpolation</a></p>

<h2>STRING INTERPOLATION: QUICK EXAMPLE ? </h2>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">n</span> <span class="k">=</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;Bob is &quot;</span><span class="o">+</span><span class="n">n</span><span class="o">+</span><span class="s">&quot; years old&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>can be replaced by :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">s</span><span class="s">&quot;Bob is $n years old&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The benefit of using String interpolation are :</p>

<p><li>one or two characters in less</li>
<li>compile time check</li>
<li>compile time transformation ( thanks to <a href="http://scalamacros.org/">macros</a>)</li></p>

<h2>PLAY 2.1</h2>


<p>On Play framework an sample action can be :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">version</span> <span class="k">=</span> <span class="mf">2.10</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">(</span><span class="s">&quot;hello scala &quot;</span><span class="o">+</span> <span class="n">version</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And by String interpolation we can rewrite it as :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">version</span> <span class="k">=</span> <span class="mf">2.10</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;hello scala $version&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>BETTER ! </h2>


<p>Let&#8217;s do better and remove parenthesizes and &#8216;s&#8217; characters</p>

<p>First create an <a href="http://docs.scala-lang.org/sips/pending/implicit-classes.html">implicit class</a> (scala 2.10 features) to wrap a call to Ok object and define an ok object :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">class</span> <span class="nc">HTTPInterpolation</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">StringContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">object</span> <span class="nc">ok</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">exprs</span><span class="k">:</span> <span class="kt">Any*</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>       <span class="nc">Ok</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="n">s</span><span class="o">(</span><span class="n">exprs</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">))</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> <span class="err">```</span>
</span><span class='line'><span class="nc">Now</span> <span class="n">we</span> <span class="n">can</span> <span class="n">use</span> <span class="n">it</span> <span class="n">as</span>
</span></code></pre></td></tr></table></div></figure>


<p> scala
def index = Action {</p>

<pre><code>val version = 2.10
ok"hello scala $version"
</code></pre>

<p>}
&#8220;`
Short and concise !</p>

<h2>REFERENCES :</h2>


<p><li>Play RaodMap: <a href="https://docs.google.com/document/d/1OEt6gZ3a-daSkNXqXGAM4jBs5LtuDkLZIzsWN9aeM1g/preview?sle=true.">https://docs.google.com/document/d/1OEt6gZ3a-daSkNXqXGAM4jBs5LtuDkLZIzsWN9aeM1g/preview?sle=true.</a></li>
<li>String interpolation : <a href="https://docs.google.com/document/d/1NdxNxZYodPA-c4MLr33KzwzKFkzm9iW9POexT9PkJsU/edit">https://docs.google.com/document/d/1NdxNxZYodPA-c4MLr33KzwzKFkzm9iW9POexT9PkJsU/edit</a></li>
<li>Implicit Class : <a href="http://docs.scala-lang.org/sips/pending/implicit-classes.html">http://docs.scala-lang.org/sips/pending/implicit-classes.html</a>
<li>Macro : <a href="http://scalamacros.org/">http://scalamacros.org/</a></li>
<li>String interpolation with concise samples : <a href="http://www.blog.project13.pl/index.php/coding/1540/scala-2-10-0-hello-string-interpolation/">http://www.blog.project13.pl/index.php/coding/1540/scala-2-10-0-hello-string-interpolation/</a></li></p>
]]></content>
  </entry>
  
</feed>
