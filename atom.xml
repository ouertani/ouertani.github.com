<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ouertani Blog]]></title>
  <link href="http://ouertani.github.com/atom.xml" rel="self"/>
  <link href="http://ouertani.github.com/"/>
  <updated>2013-04-01T03:13:20+02:00</updated>
  <id>http://ouertani.github.com/</id>
  <author>
    <name><![CDATA[Ouertani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rest with Scala and Vert.x]]></title>
    <link href="http://ouertani.github.com/blog/2013/03/09/rest-with-scala-and-vert-dot-x/"/>
    <updated>2013-03-09T00:24:00+01:00</updated>
    <id>http://ouertani.github.com/blog/2013/03/09/rest-with-scala-and-vert-dot-x</id>
    <content type="html"><![CDATA[<p>A previous post introduced some features of using Scala with <a href="http://vertx.io/">Vert.x</a>. This post covers how to publish Rest web services in an elegant and simple fashion.</p>

<p>As in the previous post, Examples in Java and Scala are presented, source code been hosted on GitHub as part of lang-scala <a href="https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala">https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala</a></p>

<!-- more -->




<h2>I- Resticle</h2>


<p>Resticle is a unit of deployment dedicated to Rest. It provides a new method (“handles”) which can be used by Vert.x to start Rest services. “handles” returns a sequence of rest handlers :</p>

<ul>
<li>RestHandler : Action => Response</li>
<li><ul>Action :
<li>GET(pattern : String)</li>
<li>POST (pattern : String)</li>
<li>PUT (pattern : String)</li>
<li>DELETE(pattern : String)</li>
<li>HEAD (pattern : String)</li>
<li>ALL(pattern : String)</li>
</ul></li>
<li>Response : HttpServerRequest => Any</li>
<li>OK, Unauthorized,&#8230;.</li>
</ul>


<p>In this tutorial we will be working with the SampleResticle class, for both scala and java.</p>

<h2>II - Hello World</h2>


<p>Vert.x provides a powerful routing and <a href="http://vertx.io/core_manual_java.html#routing-http-requests-with-pattern-matching">route matching</a> mechanism, which simplifies the routing of HTTP requests to different handlers based on pattern matching on the request path.</p>

<p>In Hello World snippet, let us publish a static GET service :</p>

<p><li>GET : /hello → code : 200 , body : world</li></p>

<h4>Scala</h4>




<figure class='code'><figcaption><span>SampleResticle.scala   </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">SampleResticle</span> <span class="k">extends</span> <span class="nc">Resticle</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">handles</span> <span class="k">=</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>      <span class="o">:&gt;</span>  <span class="nc">OK</span><span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;world &quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Java</h4>


<p></p>

<figure class='code'><figcaption><span>SampleResticle.java            </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleResticle</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RouteMatcher</span> <span class="n">routeMatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RouteMatcher</span><span class="o">();</span>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;world&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="n">routeMatcher</span><span class="o">).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>III- Chaining Handlers</h2>


<p>Using Resticle we can chain handlers quit easily. The following snippets create static GET and DELETE services :</p>

<p><li>GET : /hello → code : 200 , body : world</li>
<li>DELETE : /posts → code : 401 , body : Not allowed user</li></p>

<h4>Scala</h4>




<figure class='code'><figcaption><span>SampleResticle.scala               </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">SampleResticle</span> <span class="k">extends</span> <span class="nc">Resticle</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">handles</span> <span class="k">=</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>      <span class="o">:&gt;</span>  <span class="nc">OK</span><span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;world &quot;</span><span class="o">)</span> <span class="o">}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">DELETE</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">)</span>   <span class="o">:&gt;</span>  <span class="nc">Unauthorized</span> <span class="o">{</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;Not allowed user&quot;</span> <span class="o">}}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>java</h4>




<figure class='code'><figcaption><span>SampleResticle.java                </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleResticle</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RouteMatcher</span> <span class="n">routeMatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RouteMatcher</span><span class="o">();</span>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;world&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">401</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;Not allowed user&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="n">routeMatcher</span><span class="o">).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>IV - Value path</h2>


<p>Vert.x <a href="http://vertx.io/core_manual_java.html#routing-http-requests-with-pattern-matching">pattern matching</a> lets you extract values from the path and use them as parameters in the request.</p>

<p><li>GET : /hello → code : 200 , body : world</li>
<li>DELETE : /posts → code : 401 , body : Not allowed user</li>
<li>POST : /:blogname → code : 200 , body : post {blogname} received !</li></p>

<h4>Scala : ( Using <a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">String interpolation</a>)</h4>




<figure class='code'><figcaption><span>SampleResticle.scala               </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">SampleResticle</span> <span class="k">extends</span> <span class="nc">Resticle</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">handles</span> <span class="k">=</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>      <span class="o">:&gt;</span>  <span class="nc">OK</span><span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;world &quot;</span><span class="o">)</span> <span class="o">}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">DELETE</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">)</span>   <span class="o">:&gt;</span>  <span class="nc">Unauthorized</span> <span class="o">{</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;Not allowed user&quot;</span> <span class="o">}}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">POST</span><span class="o">(</span><span class="s">&quot;/:blogname&quot;</span><span class="o">)</span> <span class="o">:&gt;</span>  <span class="nc">OK</span> <span class="o">{</span><span class="n">req</span>  <span class="k">=&gt;</span> <span class="k">val</span> <span class="n">param</span> <span class="k">=</span> <span class="n">req</span><span class="o">.</span><span class="n">params</span><span class="o">().</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;blogname&quot;</span><span class="o">)</span> <span class="o">;</span> <span class="n">s</span><span class="s">&quot;post $param received !&quot;</span> <span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Java</h4>




<figure class='code'><figcaption><span>SampleResticle.java                </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleResticle</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RouteMatcher</span> <span class="n">routeMatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RouteMatcher</span><span class="o">();</span>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;world&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">401</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;Not allowed user&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">&quot;/:blogname&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">blogName</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">params</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;blogname&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;post &quot;</span><span class="o">+</span><span class="n">blogName</span><span class="o">+</span> <span class="s">&quot; received !&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="n">routeMatcher</span><span class="o">).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>V- Json</h2>


<p>Let’s assume we have a Blog class with two String fields title and content :</p>

<p>case class Blog (title :String , content : String)
The java equivalent has been relocated to the end of the document due to its verbosity ;).</p>

<p>Publishing an object using Resticle is simple and transparent due to implicit convertor : T => Buffer.</p>

<h4>Scala ( Type Class)</h4>


<figure class='code'><figcaption><span>Blog.scala </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Blog</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">def</span> <span class="n">toBuffer</span><span class="o">(</span><span class="n">blog</span> <span class="k">:</span> <span class="kt">Blog</span><span class="o">)</span><span class="k">:</span><span class="kt">Buffer</span> <span class="o">=</span> <span class="nc">JsonObject</span><span class="o">.</span><span class="n">withString</span><span class="o">(</span><span class="s">&quot;title&quot;</span> <span class="o">-&gt;</span> <span class="n">blog</span><span class="o">.</span><span class="n">title</span><span class="o">).</span><span class="n">withString</span><span class="o">(</span><span class="s">&quot;content&quot;</span> <span class="o">-&gt;</span> <span class="n">blog</span><span class="o">.</span><span class="n">content</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Java ( with explicit convertor )</h4>




<figure class='code'><figcaption><span>Convertor.java             </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Convertor</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span>  <span class="n">JsonObject</span> <span class="nf">toJson</span><span class="o">(</span><span class="n">Blog</span> <span class="n">blog</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="k">new</span> <span class="nf">JsonObject</span><span class="o">().</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="n">blog</span><span class="o">.</span><span class="na">getTitle</span><span class="o">()).</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;content&quot;</span><span class="o">,</span> <span class="n">blog</span><span class="o">.</span><span class="na">getContent</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><li>GET : /hello → code : 200 , body : world</li>
<li>DELETE : /posts → code : 401 , body : Not allowed user</li>
<li>POST : /:blogname → code : 200 , body : post {blogname} received !</li>
<li>GET : /:id → code : 200 , body : {&#8220;title&#8221;:&#8221;rest&#8221;,&#8221;content&#8221;:&#8221;scala &amp; vertx&#8221;}</li></p>

<h4>Scala</h4>




<figure class='code'><figcaption><span>SampleResticle.scala               </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">SampleResticle</span> <span class="k">extends</span> <span class="nc">Resticle</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">handles</span> <span class="k">=</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>      <span class="o">:&gt;</span>  <span class="nc">OK</span><span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;world &quot;</span><span class="o">)</span> <span class="o">}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">DELETE</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">)</span>   <span class="o">:&gt;</span>  <span class="nc">Unauthorized</span> <span class="o">{</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="s">&quot;Not allowed user&quot;</span> <span class="o">}}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">POST</span><span class="o">(</span><span class="s">&quot;/:blogname&quot;</span><span class="o">)</span> <span class="o">:&gt;</span>  <span class="nc">OK</span> <span class="o">{</span><span class="n">req</span>  <span class="k">=&gt;</span> <span class="k">val</span> <span class="n">param</span> <span class="k">=</span> <span class="n">req</span><span class="o">.</span><span class="n">params</span><span class="o">().</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;blogname&quot;</span><span class="o">)</span> <span class="o">;</span> <span class="n">s</span><span class="s">&quot;post $param received !&quot;</span> <span class="o">}</span> <span class="o">}</span> <span class="o">++</span>
</span><span class='line'>         <span class="o">{</span> <span class="nc">GET</span><span class="o">(</span><span class="s">&quot;/:id&quot;</span><span class="o">)</span>        <span class="o">:&gt;</span>  <span class="nc">OK</span> <span class="o">(</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">Blog</span><span class="o">(</span><span class="s">&quot;rest&quot;</span><span class="o">,</span><span class="s">&quot;scala &amp; vertx&quot;</span><span class="o">))}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Java</h4>




<figure class='code'><figcaption><span>SampleResticle.java                </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleResticle</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">RouteMatcher</span> <span class="n">routeMatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RouteMatcher</span><span class="o">();</span>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;world&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&quot;/posts&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">401</span><span class="o">;</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;Not allowed user&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">routeMatcher</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">&quot;/:blogname&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">blogName</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">params</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;blogname&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="s">&quot;post &quot;</span><span class="o">+</span><span class="n">blogName</span><span class="o">+</span> <span class="s">&quot; received !&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">routeMatcher</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;/:id&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">statusCode</span> <span class="o">=</span><span class="mi">200</span><span class="o">;</span>
</span><span class='line'>                <span class="n">Blog</span> <span class="n">blog</span> <span class="o">=</span>  <span class="k">new</span> <span class="n">Blog</span><span class="o">(</span><span class="s">&quot;rest&quot;</span><span class="o">,</span><span class="s">&quot;scala &amp; vertx&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">JsonObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">Convertor</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">blog</span><span class="o">);</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">end</span><span class="o">(</span><span class="n">obj</span><span class="o">.</span><span class="na">encode</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="n">routeMatcher</span><span class="o">).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java Blog</p>

<figure class='code'><figcaption><span>Blog.java              </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Blog</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span>  <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Blog</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getTitle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>


<p>Despite the fact that Resticle is in first development step, Rest support is by far simpler and elegant in scala than in java. As described in first tutorial Vert.x java version is burdened with a frightening number of handlers. Will Vert.x 2.0 address this point using <a href="https://github.com/vert-x/vert.x/wiki/Vert.x-2.0-plan">Promises/Deferred APIs </a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with Scala and Vert.x]]></title>
    <link href="http://ouertani.github.com/blog/2013/02/12/fun-with-scala-and-vert-dot-x/"/>
    <updated>2013-02-12T18:43:00+01:00</updated>
    <id>http://ouertani.github.com/blog/2013/02/12/fun-with-scala-and-vert-dot-x</id>
    <content type="html"><![CDATA[<p><a href="http://vertx.io/">Vert.x</a> is a polyglot event-driven application framework that runs on the Java Virtual Machine (JAVA 7 is the minimum supported version). Like Node.js, Vert.x is asynchronous and scalable, and lets developers build modern and effective web applications.</p>

<p>Being polyglot, Vert.x can be used in many flavors, among which : JavaScript,CoffeeScript, Ruby, Python,Groovy and Java. In order to enforce asynchronism and scalabity, Vert.x is built upon <a href="https://netty.io/">Netty</a>, leverage the <a href="http://en.wikipedia.org/wiki/Reactor_pattern">reactor pattern</a>, using a frightening number of handlers.</p>

<p>This article aims at showing the powerful combination of Scala and Vert.x - the Java counterpart being provided as comparison.</p>

<p>Note : the source code are hosted on GitHub as part of lang-scala <a href="https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala">https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala</a></p>

<p>Vert.x supports many components :</p>

<p><li><a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a></li>
<li>HttpServer</li>
<li>Distributed Event Bus</li>
<li>TCP Server, SockJS ,&#8230; not presented here</li></p>

<h2>I - WebSocket</h2>


<p>Web Socket are HTML 5 feature providing full-duplex communications. For old browsers that do not support WebSocket, Vert.x provides <a href="https://github.com/sockjs/sockjs-client">SockJS</a> as out-of-the-box component.</p>

<p>In order to run the following example check out : <a href="https://github.com/ouertani/vert.x/blob/master/vertx-examples/src/main/javascript/websockets/ws.html">https://github.com/ouertani/vert.x/blob/master/vertx-examples/src/main/javascript/websockets/ws.html</a> and save it into the compiled lib directory</p>

<h4>Java</h4>


<figure class='code'><figcaption><span>SampleWebSocket.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.buffer.Buffer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpServerRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.ServerWebSocket</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.deploy.Verticle</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleWebSocket</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">().</span><span class="na">websocketHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">ServerWebSocket</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="kd">final</span> <span class="n">ServerWebSocket</span> <span class="n">ws</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">ws</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;/myapp&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ws</span><span class="o">.</span><span class="na">dataHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">Buffer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Buffer</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">ws</span><span class="o">.</span><span class="na">writeTextFrame</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span> <span class="c1">// Echo it back</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>          <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ws</span><span class="o">.</span><span class="na">reject</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">requestHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">))</span> <span class="n">req</span><span class="o">.</span><span class="na">response</span><span class="o">.</span><span class="na">sendFile</span><span class="o">(</span><span class="s">&quot;ws.html&quot;</span><span class="o">);</span> <span class="c1">// Serve the html</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scala</h4>


<figure class='code'><figcaption><span>SampleWebSocket.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.vertx.java.core.buffer.Buffer</span><span class="o">;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.java.core.http.HttpServerRequest</span><span class="o">;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.java.core.http.ServerWebSocket</span><span class="o">;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.deploy.Verticle</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.core._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SampleWebSocket</span> <span class="k">extends</span> <span class="nc">Verticle</span> <span class="o">(</span>
</span><span class='line'>  <span class="k">_</span><span class="o">.</span><span class="n">getVertx</span><span class="o">().</span><span class="n">createHttpServer</span><span class="o">().</span><span class="n">websocketHandler</span><span class="o">{</span>
</span><span class='line'>     <span class="n">ws</span><span class="k">:</span><span class="kt">ServerWebSocket</span> <span class="o">=&gt;</span> <span class="n">ws</span><span class="o">.</span><span class="n">path</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s">&quot;/myapp&quot;</span> <span class="k">=&gt;</span> <span class="n">ws</span><span class="o">.</span><span class="n">dataHandler</span><span class="o">{</span><span class="n">data</span> <span class="k">:</span> <span class="kt">Buffer</span> <span class="o">=&gt;</span>   <span class="n">ws</span><span class="o">.</span><span class="n">writeTextFrame</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="n">toString</span><span class="o">())}</span>
</span><span class='line'>        <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">ws</span><span class="o">.</span><span class="n">reject</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}}</span>
</span><span class='line'>      <span class="o">.</span><span class="n">requestHandler</span><span class="o">{</span><span class="n">req</span> <span class="k">:</span> <span class="kt">HttpServerRequest</span> <span class="o">=&gt;</span> <span class="n">req</span><span class="o">.</span><span class="n">path</span> <span class="k">match</span> <span class="o">{</span><span class="k">case</span> <span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">req</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">sendFile</span><span class="o">(</span><span class="s">&quot;ws.html&quot;</span><span class="o">)}}</span>
</span><span class='line'>      <span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">)</span>
</span><span class='line'><span class="o">)()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>II-HttpWebServer</h2>


<p>Vert.x allows you to easily write full featured, highly performant and scalable HTTP and HTTPS servers.</p>

<p>The following example starts up an Http server, listening on port 8080, and logging all received requests.</p>

<h4>Java</h4>


<figure class='code'><figcaption><span>SampleHttpWebServer.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpServer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpServerRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.logging.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.deploy.Verticle</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleHttpWebServer</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpServer</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">getContainer</span><span class="o">().</span><span class="na">getLogger</span><span class="o">();</span>
</span><span class='line'>        <span class="n">server</span><span class="o">.</span><span class="na">requestHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpServerRequest</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServerRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;A request has arrived on the server!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scala</h4>


<figure class='code'><figcaption><span>SampleWebServer.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.vertx.java.core.http.</span> <span class="o">{</span> <span class="nc">HttpServerRequest</span> <span class="k">=&gt;</span> <span class="nc">JHttpServerRequest</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.deploy.Verticle</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.core._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SampleWebServer</span> <span class="k">extends</span> <span class="nc">Verticle</span> <span class="o">(</span> <span class="n">x</span> <span class="k">=&gt;</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">getVertx</span><span class="o">().</span><span class="n">createHttpServer</span><span class="o">().</span><span class="n">withRequestHandler</span><span class="o">{</span><span class="k">_</span> <span class="k">:</span> <span class="kt">JHttpServerRequest</span> <span class="o">=&gt;</span>
</span><span class='line'>     <span class="n">x</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;A request has arrived on the server!&quot;</span><span class="o">)}</span>
</span><span class='line'><span class="o">.</span><span class="n">listen</span><span class="o">(</span><span class="mi">8080</span><span class="o">,</span> <span class="s">&quot;localhost&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>III-HttpClient</h2>


<p>Vert.x also provides an HttpClient API, so as to interact with the server part. The following samples create and send a GET request, then log the server&#8217;s response.</p>

<h4>Java</h4>


<figure class='code'><figcaption><span>SampleHttpClient.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpClientRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.http.HttpClientResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.logging.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.deploy.Verticle</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleHttpClient</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">createHttpClient</span><span class="o">().</span><span class="na">setHost</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">getContainer</span><span class="o">().</span><span class="na">getLogger</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">HttpClientRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">&quot;/some-path/&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">&lt;</span><span class="n">HttpClientResponse</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpClientResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Got a response: &quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">end</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scala</h4>


<figure class='code'><figcaption><span>SampleWebClient.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.deploy.Verticle</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.core._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SampleWebClient</span> <span class="k">extends</span> <span class="nc">Verticle</span> <span class="o">(</span><span class="n">v</span> <span class="k">=&gt;</span>
</span><span class='line'>   <span class="n">v</span><span class="o">.</span><span class="n">getVertx</span><span class="o">.</span><span class="n">createHttpClient</span><span class="o">().</span><span class="n">setHost</span><span class="o">(</span><span class="s">&quot;127.0.0.1&quot;</span><span class="o">).</span><span class="n">setPort</span><span class="o">(</span><span class="mi">8080</span><span class="o">)</span>
</span><span class='line'>   <span class="o">.</span><span class="n">andGetNow</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span> <span class="o">{</span><span class="k">_</span> <span class="k">=&gt;</span> <span class="n">v</span><span class="o">.</span><span class="n">info</span><span class="o">(</span><span class="s">&quot;Got a response: &quot;</span> <span class="o">)}</span>
</span><span class='line'>  <span class="o">)()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>IV-EventBus</h2>


<p>The event bus is like a vertebral spine, it can be used to connect distributed nodes, and to support interaction between different Verticles, even written in different languages.</p>

<h4>Java</h4>


<figure class='code'><figcaption><span>SampleEventBus.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.deploy.Verticle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.vertx.java.core.eventbus.EventBus</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleEventBus</span> <span class="kd">extends</span> <span class="n">Verticle</span> <span class="o">{</span>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">EventBus</span> <span class="n">eb</span> <span class="o">=</span> <span class="n">vertx</span><span class="o">.</span><span class="na">eventBus</span><span class="o">();</span>
</span><span class='line'>       <span class="n">eb</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;path&quot;</span><span class="o">,</span> <span class="s">&quot;ping1&quot;</span><span class="o">);</span>
</span><span class='line'>       <span class="n">eb</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;path&quot;</span><span class="o">,</span> <span class="s">&quot;ping2&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scala</h4>


<figure class='code'><figcaption><span>SampleEventBus.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.deploy.Verticle</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.vertx.scala.core._</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SampleEventBus</span> <span class="k">extends</span> <span class="nc">Verticle</span> <span class="o">(</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'> <span class="k">val</span>  <span class="n">point</span> <span class="k">=</span> <span class="n">x</span> <span class="o">!</span> <span class="o">(</span><span class="s">&quot;path&quot;</span><span class="o">)</span>
</span><span class='line'> <span class="n">point</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="s">&quot;ping 1&quot;</span><span class="o">)</span>
</span><span class='line'> <span class="n">point</span> <span class="o">&gt;&gt;</span> <span class="o">(</span><span class="s">&quot;ping 2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">)()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>


<p>This article introduced the basic of Vert.x using scala language and short examples. Full Scala language support will soon, hopefully, become available.</p>

<p>Stay tuned, a subsequent post will show you more about Vert.x with Scala.</p>

<p>source : http://blog.zenika.com/index.php?post/2013/02/11/fun-with-scala-and-vert-x</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play 2.1 Scala 2.10 and String Interpolation]]></title>
    <link href="http://ouertani.github.com/blog/2012/10/18/getting-started-with-play-2-dot-1/"/>
    <updated>2012-10-18T19:00:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2012/10/18/getting-started-with-play-2-dot-1</id>
    <content type="html"><![CDATA[<p>Play Roadmap has been <a href="https://docs.google.com/document/d/1OEt6gZ3a-daSkNXqXGAM4jBs5LtuDkLZIzsWN9aeM1g/preview?sle=true">published</a>. The major feature will be the support of <a href="http://www.scala-lang.org/">scala 2.10</a> version.</p>

<p>By using <a href="http://www.playframework.org/">Play 2.1</a> we can start profiting with <a href="https://docs.google.com/document/d/1NdxNxZYodPA-c4MLr33KzwzKFkzm9iW9POexT9PkJsU/edit">String interpolation</a></p>

<h2>STRING INTERPOLATION: QUICK EXAMPLE ? </h2>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">n</span> <span class="k">=</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;Bob is &quot;</span><span class="o">+</span><span class="n">n</span><span class="o">+</span><span class="s">&quot; years old&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>can be replaced by :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">s</span><span class="s">&quot;Bob is $n years old&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The benefit of using String interpolation are :</p>

<p><li>one or two characters in less</li>
<li>compile time check</li>
<li>compile time transformation ( thanks to <a href="http://scalamacros.org/">macros</a>)</li></p>

<h2>PLAY 2.1</h2>


<p>On Play framework an sample action can be :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">version</span> <span class="k">=</span> <span class="mf">2.10</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">(</span><span class="s">&quot;hello scala &quot;</span><span class="o">+</span> <span class="n">version</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And by String interpolation we can rewrite it as :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">version</span> <span class="k">=</span> <span class="mf">2.10</span>
</span><span class='line'>  <span class="nc">Ok</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;hello scala $version&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>BETTER ! </h2>


<p>Let&#8217;s do better and remove parenthesizes and &#8216;s&#8217; characters</p>

<p>First create an <a href="http://docs.scala-lang.org/sips/pending/implicit-classes.html">implicit class</a> (scala 2.10 features) to wrap a call to Ok object and define an ok object :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">class</span> <span class="nc">HTTPInterpolation</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">StringContext</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">object</span> <span class="nc">ok</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">exprs</span><span class="k">:</span> <span class="kt">Any*</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>       <span class="nc">Ok</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="n">s</span><span class="o">(</span><span class="n">exprs</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">))</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can use it as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">version</span> <span class="k">=</span> <span class="mf">2.10</span>
</span><span class='line'>    <span class="n">ok</span><span class="s">&quot;hello scala $version&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Short and concise !</p>

<h2>REFERENCES :</h2>


<p><li>Play RaodMap: <a href="https://docs.google.com/document/d/1OEt6gZ3a-daSkNXqXGAM4jBs5LtuDkLZIzsWN9aeM1g/preview?sle=true.">https://docs.google.com/document/d/1OEt6gZ3a-daSkNXqXGAM4jBs5LtuDkLZIzsWN9aeM1g/preview?sle=true.</a></li>
<li>String interpolation : <a href="https://docs.google.com/document/d/1NdxNxZYodPA-c4MLr33KzwzKFkzm9iW9POexT9PkJsU/edit">https://docs.google.com/document/d/1NdxNxZYodPA-c4MLr33KzwzKFkzm9iW9POexT9PkJsU/edit</a></li>
<li>Implicit Class : <a href="http://docs.scala-lang.org/sips/pending/implicit-classes.html">http://docs.scala-lang.org/sips/pending/implicit-classes.html</a>
<li>Macro : <a href="http://scalamacros.org/">http://scalamacros.org/</a></li>
<li>String interpolation with concise samples : <a href="http://www.blog.project13.pl/index.php/coding/1540/scala-2-10-0-hello-string-interpolation/">http://www.blog.project13.pl/index.php/coding/1540/scala-2-10-0-hello-string-interpolation/</a></li></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play 2.1 , Scala 2.10 and Slick 0.11.1]]></title>
    <link href="http://ouertani.github.com/blog/2012/10/09/play-2-dot-1/"/>
    <updated>2012-10-09T15:17:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2012/10/09/play-2-dot-1</id>
    <content type="html"><![CDATA[<p>Starting from scala <a href="http://www.scala-lang.org/downloads">2.10</a> version , <a href="http://slick.typesafe.com/">Slick</a> will be by defaut the database manager. In addition, <a href="http://www.playframework.org/">Playframework</a>  also will be based on scala 2.10  since version 2.1.</p>

<p>In this tutorial, I will try to present an example using the last version of slick and scalatest based on <a href="http://www.scala-lang.org/downloads">scala 2.10.0-M7</a> and a developpment version of <a href="https://github.com/playframework/Play20">playframework</a></p>

<p>This post follow this <a href="http://www.artima.com/articles/play2_scala_squeryl.html">famous tutorial</a> !</p>

<p>Setup <a href="http://slick.typesafe.com/">Slick</a> in Play 2</p>

<p>If you don&#8217;t already have a Play 2 project, then create a new one after installing Play 2:</p>

<blockquote><p>play new mySlickApp</p></blockquote>


<p>Choose Scala as the language for the project.</p>

<p>The Slick library needs to be added to the Play project.</p>

<p>Edit the project/Build.scala file and update the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">appDependencies</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>   <span class="s">&quot;com.typesafe&quot;</span> <span class="o">%</span> <span class="s">&quot;slick_2.10.0-M7&quot;</span> <span class="o">%</span> <span class="s">&quot;0.11.1&quot;</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then if you are using an Eclipse or IntelliJ Play can automatically create the project for you using either:</p>

<blockquote><p>play idea</p><p>or</p><p>play eclipse</p></blockquote>


<p>Note that we created the project files after updating the dependencies, so the projects would be configured with the required libraries. If the dependencies change in the future, just re-run the commands to create the projects.</p>

<p>You can now start the application from within your project&#8217;s root directory:</p>

<blockquote><p>play ~run</p></blockquote>


<p>Verify that the server is running by opening the following URL in your browser: http://localhost:9000</p>

<p>For local testing we will use an in-memory &#8220;h2&#8221; database. To setup Play to use that database, edit the conf/application.conf file and uncomment or add the following lines:</p>

<blockquote><p>db.default.driver=org.h2.Driver<br/>db.default.url=&#8221;jdbc:h2:mem:play&#8221;</p></blockquote>


<p>The final setup step is to provide Squeryl a database connection, but we still want to use the standard Play configuration system to get the database connection information. This is easily done by adding a Global class that can hook into the startup phase of the Play application lifecycle. Create a new file named app/Global.scala containing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.db.DB</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.GlobalSettings</span>
</span><span class='line'><span class="c1">// Use H2Driver to connect to an H2 database</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.slick.driver.H2Driver.simple._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use the implicit threadLocalSession</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Database.threadLocalSession</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.Application</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.Play.current</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Global</span> <span class="k">extends</span> <span class="nc">GlobalSettings</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onStart</span><span class="o">(</span><span class="n">app</span><span class="k">:</span> <span class="kt">Application</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">lazy</span> <span class="k">val</span> <span class="n">database</span> <span class="k">=</span> <span class="nc">Database</span><span class="o">.</span><span class="n">forDataSource</span><span class="o">(</span><span class="nc">DB</span><span class="o">.</span><span class="n">getDataSource</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On application startup the  configuration parameter will be used to determine which driver to use to setup the database connection.</p>

<p>If you reload the http://localhost:9000 webpage in your browser, everything should still be working and you should see the following message in the Play STDOUT log:</p>

<blockquote><p>[info] play - database [default] connected at jdbc:h2:mem:play</p></blockquote>


<p>Create an Entity</p>

<p>Now lets create a simple entity object that will be used to persist data into the database. Create a new file named app/models/Bar.scala containing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">models</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.slick.driver.H2Driver.simple._</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Bar</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Bars</span> <span class="k">extends</span> <span class="nc">Table</span><span class="o">[</span><span class="kt">Bar</span><span class="o">](</span><span class="s">&quot;bar&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">id</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">O</span><span class="o">.</span><span class="nc">PrimaryKey</span><span class="o">,</span> <span class="n">O</span><span class="o">.</span><span class="nc">AutoInc</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This is the primary key column</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">name</span> <span class="k">=</span> <span class="n">column</span><span class="o">[</span><span class="kt">String</span><span class="o">](</span><span class="s">&quot;name&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Every table needs a * projection with the same type as the table&#39;s type parameter</span>
</span><span class='line'>  <span class="k">def</span> <span class="o">*</span> <span class="k">=</span> <span class="n">id</span><span class="o">.?</span> <span class="o">~</span> <span class="n">name</span> <span class="o">&lt;&gt;(</span><span class="nc">Bar</span><span class="o">,</span> <span class="nc">Bar</span><span class="o">.</span><span class="n">unapply</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a very simple entity that will store a list of Bar objects. Each Bar has a name and an id property for the primary key. The case class in Scala is immutable and basically supercharges a class, adding a number of syntactic conveniences. It also allows it to be used for pattern matching, which can be quite handy when matching form values returned from the client. The Bars object is an instance of Table  Bar that Slick will map into the database.</p>

<p>Begineer about slick, I will not use evolution to create database but let slick create it for me, let&#8217;s modify Global.scala as bellow :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">play.api.db.DB</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.GlobalSettings</span>
</span><span class='line'><span class="c1">// Use H2Driver to connect to an H2 database</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.slick.driver.H2Driver.simple._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use the implicit threadLocalSession</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Database.threadLocalSession</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.Application</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.Play.current</span>
</span><span class='line'><span class="k">import</span> <span class="nn">models.Bars</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Global</span> <span class="k">extends</span> <span class="nc">GlobalSettings</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">onStart</span><span class="o">(</span><span class="n">app</span><span class="k">:</span> <span class="kt">Application</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">lazy</span> <span class="k">val</span> <span class="n">database</span> <span class="k">=</span> <span class="nc">Database</span><span class="o">.</span><span class="n">forDataSource</span><span class="o">(</span><span class="nc">DB</span><span class="o">.</span><span class="n">getDataSource</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">database</span> <span class="o">.</span><span class="n">withSession</span> <span class="o">{</span>
</span><span class='line'>     <span class="nc">Bars</span><span class="o">.</span><span class="n">ddl</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>reload the http://localhost:9000 webpage to create bar table on your local in-memory database.
Test the Model</p>

<p>The testing support in Play 2 is very powerful and fits well with the Test Driven Development style. Play 2 with Scala uses specs2 as the default for testing but we prefer ScalaTest. Lets create a simple test for the Bar model object. Start by adding the ScalaTest dependency to the project and modifying the testOptions setting.  Since scala 2.10.0-M6 scala-actor is an independent jar and must be add as dependencies.
Update the project/Build.scala file to contain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">appDependencies</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;org.scalatest&quot;</span> <span class="o">%</span> <span class="s">&quot;scalatest_2.10.0-M7&quot;</span> <span class="o">%</span> <span class="s">&quot;2.0.M4-2.10.0-M7-B1&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;org.scala-lang&quot;</span> <span class="o">%</span> <span class="s">&quot;scala-actors&quot;</span> <span class="o">%</span> <span class="s">&quot;2.10.0-M7&quot;</span>    <span class="o">%</span> <span class="s">&quot;test&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="s">&quot;com.typesafe&quot;</span> <span class="o">%</span> <span class="s">&quot;slick_2.10.0-M7&quot;</span> <span class="o">%</span> <span class="s">&quot;0.11.1&quot;</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">main</span> <span class="k">=</span> <span class="nc">PlayProject</span><span class="o">(</span><span class="n">appName</span><span class="o">,</span> <span class="n">appVersion</span><span class="o">,</span> <span class="n">appDependencies</span><span class="o">,</span> <span class="n">mainLang</span> <span class="k">=</span> <span class="nc">SCALA</span><span class="o">).</span><span class="n">settings</span><span class="o">(</span>
</span><span class='line'>  <span class="n">testOptions</span> <span class="n">in</span> <span class="nc">Test</span> <span class="o">:=</span> <span class="nc">Nil</span>
</span><span class='line'>  <span class="c1">// Add your own project settings here</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now create a new file named test/BarSpec.scala containing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">models.</span><span class="o">{</span><span class="nc">Bars</span><span class="o">,</span> <span class="nc">Bar</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.FlatSpec</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.scalatest.matchers.ShouldMatchers</span>
</span><span class='line'><span class="c1">// Use H2Driver to connect to an H2 database</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.slick.driver.H2Driver.simple._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use the implicit threadLocalSession</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Database.threadLocalSession</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.test._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.test.Helpers._</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BarSpec</span> <span class="k">extends</span> <span class="nc">FlatSpec</span> <span class="k">with</span> <span class="nc">ShouldMatchers</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;A Bar&quot;</span> <span class="n">should</span> <span class="s">&quot;be creatable&quot;</span> <span class="n">in</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Database</span><span class="o">.</span><span class="n">forURL</span><span class="o">(</span><span class="s">&quot;jdbc:h2:mem:test1&quot;</span><span class="o">,</span> <span class="n">driver</span> <span class="k">=</span> <span class="s">&quot;org.h2.Driver&quot;</span><span class="o">)</span> <span class="n">withSession</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nc">Bars</span><span class="o">.</span><span class="n">ddl</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>      <span class="nc">Bars</span><span class="o">.</span><span class="n">insert</span><span class="o">(</span><span class="nc">Bar</span><span class="o">(</span><span class="nc">None</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="k">for</span><span class="o">(</span><span class="n">b</span> <span class="k">&lt;-</span> <span class="nc">Bars</span><span class="o">)</span> <span class="k">yield</span> <span class="n">b</span>
</span><span class='line'>      <span class="n">b</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">get</span>     <span class="n">should</span>  <span class="n">equal</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test uses a  an in-memory database to run the test.  The body of the test simply creates a new instance of Bar and tests that the id is equal to one.  Different from Play 1, test are run from the command line using:</p>

<p>play test</p>

<p>If the tests worked, then you should see the following message in the Play STDOUT log:</p>

<blockquote><p>[mySlickApp] $ test<br/>[info] BarSpec:<br/>[info] A Bar<br/>[info] - should be creatable<br/>[info] Passed: : Total 1, Failed 0, Errors 0, Passed 1, Skipped 0<br/>[success] Total time: 2 s, completed Oct 9, 2012 12:28:28 PM</p></blockquote>


<p>If you&#8217;d like to have the tests run whenever the source changes then run:</p>

<blockquote><p>play ~test</p></blockquote>


<p>You can keep both the ~run and ~test commands running in the background. This allows you to quickly test the application from both programmatic unit / functional tests and from manual browser tests.
Creating Bars From a Web Form</p>

<p>Now lets add a basic web UI for creating new Bar objects. Note that this code will not compile until this entire section is completed.</p>

<p>First update the app/controllers/Application.scala file to contain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">controllers</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.mvc._</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.data.Form</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.data._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.data.Forms._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use H2Driver to connect to an H2 database</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.slick.driver.H2Driver.simple._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use the implicit threadLocalSession</span>
</span><span class='line'><span class="c1">//import Database.threadLocalSession</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.slick.session.Session</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">models.</span><span class="o">{</span><span class="nc">Bar</span><span class="o">,</span> <span class="nc">Bars</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.db._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.Play.current</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use H2Driver to connect to an H2 database</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.slick.driver.H2Driver.simple._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use the implicit threadLocalSession</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">Database.threadLocalSession</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">lazy</span> <span class="k">val</span> <span class="n">database</span> <span class="k">=</span> <span class="nc">Database</span><span class="o">.</span><span class="n">forDataSource</span><span class="o">(</span><span class="nc">DB</span><span class="o">.</span><span class="n">getDataSource</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">barForm</span> <span class="k">=</span> <span class="nc">Form</span><span class="o">(</span>
</span><span class='line'>    <span class="n">mapping</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;name&quot;</span> <span class="o">-&gt;</span> <span class="n">text</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>      <span class="o">((</span><span class="n">name</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Bar</span><span class="o">(</span><span class="nc">None</span><span class="o">,</span> <span class="n">name</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">((</span><span class="n">bar</span><span class="k">:</span> <span class="kt">Bar</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">bar</span><span class="o">.</span><span class="n">name</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="n">barForm</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">addBar</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">barForm</span><span class="o">.</span><span class="n">bindFromRequest</span><span class="o">.</span><span class="n">value</span> <span class="n">map</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">bar</span> <span class="k">=&gt;</span>
</span><span class='line'>          <span class="n">database</span> <span class="n">withSession</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">(</span><span class="nc">Bars</span> <span class="n">insert</span> <span class="n">bar</span><span class="o">)</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="nc">Redirect</span><span class="o">(</span><span class="n">routes</span><span class="o">.</span><span class="nc">Application</span><span class="o">.</span><span class="n">index</span><span class="o">())</span>
</span><span class='line'>      <span class="o">}</span> <span class="n">getOrElse</span> <span class="nc">BadRequest</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The barForm provides a mapping from a request parameter named name to the name property on the Bar case class (via it&#8217;s constructor). The index method has been updated to pass an instance of the barForm into the index template. We will update that template next. The addBar method binds the request parameters into an object named bar then in a session the bar is inserted into the database.  Then the user is redirected back to the index page. If the request parameters could not be mapped to a Bar using the barForm then a BadRequest error is returned.</p>

<p>Now we need to update the app/views/index.scala.html template to contain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">@(</span><span class="n">form</span><span class="k">:</span> <span class="kt">play.api.data.Form</span><span class="o">[</span><span class="kt">Bar</span><span class="o">])</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@main</span><span class="o">(</span><span class="s">&quot;Welcome to Play 2.0&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@helper</span><span class="o">.</span><span class="n">form</span><span class="o">(</span><span class="n">action</span> <span class="k">=</span> <span class="n">routes</span><span class="o">.</span><span class="nc">Application</span><span class="o">.</span><span class="n">addBar</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@helper</span><span class="o">.</span><span class="n">inputText</span><span class="o">(</span><span class="n">form</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;submit&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The template now takes a Form[Bar] parameter which is passed from the index method on the Application controller. Then in the body of the template a new HTML form is rendered using Play 2&#8217;s form helper. The form contains an HTML field for the name and a submit button. Notice that the action of the form points from the route to the Application controller&#8217;s addBar method.</p>

<p>If you look in the console window at this point you will see the error &#8220;value addBar is not a member of controllers.ReverseApplication&#8221;. This is because the route file is compiled and the view is checked for a valid route. But we haven&#8217;t created a route yet, so edit the conf/routes file and add a new line with the following:</p>

<blockquote><p>POST    /bars                       controllers.Application.addBar</p></blockquote>


<p>This creates a HTTP route that maps POST requests for the /bars URL to the addBar method.</p>

<p>Now refresh http://localhost:9000 in your browser and you should see the very basic form for adding new Bar objects. If successful, after adding a new Bar the browser should just redirect back to the index page.</p>

<p>Now lets add a RESTful service to the application that will return all of the Bar objects as JSON-serialized data. Start by adding a new method to the app/controllers/Application.scala file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">getBars</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">json</span> <span class="k">=</span> <span class="n">database</span> <span class="n">withSession</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">bars</span> <span class="k">=</span> <span class="k">for</span> <span class="o">(</span><span class="n">b</span> <span class="k">&lt;-</span> <span class="nc">Bars</span><span class="o">)</span> <span class="k">yield</span> <span class="n">b</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">toString</span>
</span><span class='line'>      <span class="nc">Json</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">bars</span><span class="o">.</span><span class="n">list</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="n">json</span><span class="o">).</span><span class="n">as</span><span class="o">(</span><span class="nc">JSON</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The getBars method fetches the Bar objects from the database using Slick dsl and then creates a JSON representation of the list of Bar objects and returns the JSON data.</p>

<p>Now add a new route to the conf/routes file:</p>

<blockquote><p>GET     /bars                       controllers.Application.getBars</p></blockquote>


<p>This maps GET requests for /bars to the getBars method.</p>

<p>Try this out in your browser by loading: http://localhost:9000/bars</p>

<p>You should see a list of the Bar objects you&#8217;ve created serialized as JSON.</p>

<p>The syntax of the query demonstrates the power of Slick type-safe query language and the power of Scala to create DSLs.  The json val is then returned in an Ok (HTTP 200 status code response) with the content type set to application/json (the value of JSON).</p>

<h2>References :</h2>


<p><li>Slick : http://slick.typesafe.com </li>
<li>Playframework :  http://www.playframework.org </li></p>

<pre><code>                        https://github.com/playframework/Play20&lt;/li&gt;
</code></pre>

<p><li>Scala : http://www.scala-lang.org/downloads</li>
<li>Squeryl + Playframework + Scala  : http://www.artima.com/articles/play2_scala_squeryl.html</li></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML/RPC driver as JCA Scala connector]]></title>
    <link href="http://ouertani.github.com/blog/2012/09/26/xml-slash-rpc-driver-as-jca-scala-connector/"/>
    <updated>2012-09-26T19:41:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2012/09/26/xml-slash-rpc-driver-as-jca-scala-connector</id>
    <content type="html"><![CDATA[<p>Interoperability and reusability are key features of SOA architecture.</p>

<p>The <a href="http://en.wikipedia.org/wiki/Java_EE_Connector_Architecture">Java EE Connector architecture</a> defines a standard architecture for connecting the Java EE platform to heterogeneous EISs. This article presents an XML/RPC  adapter using a Scala JCA outbound connector to an IN/AIR legacy system.</p>

<h2>JCA and integration</h2>




<blockquote><p>&#8220;For enterprise application integration, bi-directional connectivity between enterprise applications and EIS is essential. The Java EE Connector architecture defines standard contracts that allow bi-directional connectivity between enterprise applications and EISs. It also formalizes the relationships, interactions, and the packaging of the integration layer, thus enabling enterprise application integration.&#8221;</p><footer><strong>JCA 1.6 p 35</strong></footer></blockquote>


<p>The connector architecture defines a set of scalable, secure, and transactional mechanisms that enable the integration of EISs with application servers and enterprise application.</p>

<p><img class="center" src="http://ouertani.github.com/images/jca.jpg" width="350" height="350" title="JCA" alt="images"></p>

<p>Using a UCIP JCA connector rather than using an <a href="http://java.dzone.com/articles/xml-rpc-using-scala">XML/RPC raw driver</a> lets you:</p>

<ol>
<li>Hide connection complexity.</li>
<li>Use connection pooling and scalability.</li>
<li>Use a standard adapter that can be deployed with any JEE 6 server from an m x n integration problem to an m + n solution</li>
</ol>


<h2>How?</h2>


<p>The use of a <a href="http://www.jcp.org/en/jsr/detail?id=322">JCA</a> resource adapter inside a JEE solution is the same as interacting with a database or queue: protocol communication and wire negotiation&#8230; are hidden to the final user.</p>

<p>Two interfaces are presented to a customer:</p>

<h3>1) A factory trait:</h3>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">AirConnectorFactory</span> <span class="k">extends</span> <span class="nc">Referenceable</span> <span class="k">with</span> <span class="nc">Function0</span><span class="o">[</span><span class="kt">AirConnector</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2) The connector trait:</h3>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">AirConnector</span> <span class="o">{</span>
</span><span class='line'><span class="k">def</span> <span class="n">fire</span><span class="o">(</span><span class="n">elem</span> <span class="k">:</span> <span class="kt">Elem</span><span class="o">)</span> <span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Elem</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As an outbound communication where the resource adapter allows an ESB or EE application server to connect to an IN/AIR node and perform work. All communication is initiated by the application. The Air connector factory should be injected as any resource and used like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nd">@Resource</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;AIR&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">airConnectorFactory</span> <span class="k">:</span> <span class="kt">AirConnectorFactory</span> <span class="o">=</span> <span class="k">_</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">output</span> <span class="k">=</span> <span class="n">airConnectorFactory</span><span class="o">().</span><span class="n">fire</span><span class="o">(</span><span class="n">input</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Source code is based on JCA 1.6 specification and hosted on <a href="https://github.com/ouertani/TelcoCX">github</a>.</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML-RPC using scala]]></title>
    <link href="http://ouertani.github.com/blog/2012/06/29/xml-rpc-using-scala/"/>
    <updated>2012-06-29T02:03:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2012/06/29/xml-rpc-using-scala</id>
    <content type="html"><![CDATA[<h2>Purpose</h2>


<p>Calling remote procedure using XML-RPC and Scala.</p>

<h2>Introduction</h2>


<p>On Telecom IT environment and specially middelware solution, we will rarely do all the work but rather delegate some of business process to other tiers. Web service communications is heavy used between solutions. However, many IT node continues to support older protocols like XML-RPC. Ericsson Intelligent Network (IN) and its subsystem uses AIR Integration Protocol user communication(UCIP) based on a variant of XM-RPC.</p>

<h2>Why UCIP ?</h2>


<p>UCIP is intended for user self services such as Adjustments, Account Refill, and Account Inquiries and to extract account details. UCIP is an IP-based protocol used for integration towards the AIR server from the external application.</p>

<h2>Why Scala ?</h2>


<p>UCIP is an XML over HTTP based protocol, which makes it easy to integrate with a central integration point within a network. In addition, Scala can be used to easily create, parse, and process XML documents. XML data can be represented in Scala either by using a generic data representation, or with a data-specific data representation.</p>

<h2>Scala & XML-RPC</h2>


<p>Rather than using an precompiled version of XML-RPC library, we will do our home solution using httpclient library from apache :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'> <span class="nt">&lt;groupId&gt;</span>org.apache.httpcomponents<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'> <span class="nt">&lt;artifactId&gt;</span>httpclient<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'> <span class="nt">&lt;version&gt;</span>4.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>UPDATEBALANCEANDDATE</h3>


<p>The message UpdateBalanceAndDate is used to adjust balances and expiry dates on the main account and the dedicated accounts. The sample I chooses here is only to update main balance :</p>

<p>Let&#8217;s start with some helpful class :</p>

<p>1- InParameters class : contains In specific configuration like ip and port</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">InParameters</span><span class="o">(</span><span class="n">ip</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span><span class="n">port</span><span class="k">:</span><span class="kt">Int</span><span class="o">,</span><span class="n">user</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span><span class="n">pwd</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span><span class="n">agent</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span><span class="n">url</span><span class="k">:</span><span class="kt">String</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>2- XMLRPCVo abstract class : groups all XML request message like the transaction generated Id and date</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">XmlRpcVo</span> <span class="o">{</span>
</span><span class='line'> <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyyMMdd&#39;T&#39;HH:mm:ssZ&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">XmlRpcVo</span> <span class="o">{</span>
</span><span class='line'> <span class="k">def</span> <span class="n">originTransactionID</span> <span class="k">=</span> <span class="nc">System</span> <span class="n">currentTimeMillis</span>
</span><span class='line'> <span class="k">def</span> <span class="n">dateTime</span><span class="k">:</span><span class="kt">String</span><span class="o">=</span> <span class="nc">XmlRpcVo</span><span class="o">.</span><span class="n">f</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="k">new</span> <span class="nc">Date</span><span class="o">())</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3- UpdateBalanceAndDateParameter class with extend our XMLRPCVo and contains all data needed by Update main balance operation like subscriber number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">UpdateBalanceAndDateParameter</span><span class="o">(</span><span class="n">subscriberNumber</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span>
</span><span class='line'> <span class="n">originNodeType</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span>
</span><span class='line'> <span class="n">originHostName</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span>
</span><span class='line'> <span class="n">transactionCurrency</span><span class="k">:</span><span class="kt">String</span><span class="o">,</span>
</span><span class='line'> <span class="n">amount</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">)</span>
</span><span class='line'><span class="k">extends</span> <span class="nc">XmlRpcVo</span>
</span></code></pre></td></tr></table></div></figure>


<p>4-UCIP suggests to add custom header on XML-RPC message. XmlRpcHttpClient class dialogue with IN nodes using generic execute method</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">XmlRpcHttpClient</span><span class="o">(</span><span class="n">inp</span> <span class="k">:</span><span class="kt">InParameters</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">LogHelper</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">httpclient</span><span class="k">:</span><span class="kt">DefaultHttpClient</span> <span class="o">=</span> <span class="n">client</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">def</span> <span class="n">client</span><span class="o">()</span> <span class="k">=</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">httpclient</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">DefaultHttpClient</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">httpclient</span><span class="o">.</span><span class="n">getCredentialsProvider</span><span class="o">().</span><span class="n">setCredentials</span><span class="o">(</span>
</span><span class='line'>      <span class="k">new</span> <span class="nc">AuthScope</span><span class="o">(</span><span class="n">inp</span><span class="o">.</span><span class="n">ip</span><span class="o">,</span> <span class="n">inp</span><span class="o">.</span><span class="n">port</span><span class="o">),</span>
</span><span class='line'>      <span class="k">new</span> <span class="nc">UsernamePasswordCredentials</span><span class="o">(</span><span class="n">inp</span><span class="o">.</span><span class="n">user</span><span class="o">,</span> <span class="n">inp</span><span class="o">.</span><span class="n">pwd</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">httpclient</span><span class="o">.</span><span class="n">getParams</span><span class="o">().</span><span class="n">setParameter</span><span class="o">(</span><span class="nc">CoreProtocolPNames</span><span class="o">.</span><span class="nc">USER_AGENT</span><span class="o">,</span> <span class="n">inp</span><span class="o">.</span><span class="n">agent</span><span class="o">)</span>
</span><span class='line'>    <span class="n">httpclient</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">private</span> <span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">def</span> <span class="n">poster</span><span class="o">(</span><span class="n">elem</span><span class="k">:</span><span class="kt">Elem</span><span class="o">)</span> <span class="o">={</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">httppost</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">HttpPost</span><span class="o">(</span><span class="n">inp</span><span class="o">.</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>    <span class="n">httppost</span><span class="o">.</span><span class="n">addHeader</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="s">&quot;text/xml&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">httppost</span><span class="o">.</span><span class="n">addHeader</span><span class="o">(</span><span class="s">&quot;Content-Disposition&quot;</span><span class="o">,</span> <span class="s">&quot;form-data; name=\&quot;fname\&quot;; filename=\&quot;request.xml\&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">comment</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">StringBody</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">+</span><span class="n">elem</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">reqEntity</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MultipartEntity</span><span class="o">()</span>
</span><span class='line'>    <span class="n">reqEntity</span><span class="o">.</span><span class="n">addPart</span><span class="o">(</span><span class="s">&quot;fname&quot;</span><span class="o">,</span> <span class="n">comment</span><span class="o">)</span>
</span><span class='line'>    <span class="n">httppost</span><span class="o">.</span><span class="n">setEntity</span><span class="o">(</span><span class="n">reqEntity</span><span class="o">)</span>
</span><span class='line'>    <span class="n">httppost</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">execute</span><span class="o">(</span><span class="n">requestVo</span><span class="k">:</span><span class="kt">scala.xml.Elem</span><span class="o">)</span><span class="k">:</span><span class="kt">HttpResponse</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span>     <span class="o">{</span> <span class="n">client</span><span class="o">.</span><span class="n">execute</span><span class="o">(</span><span class="n">poster</span><span class="o">(</span><span class="n">requestVo</span><span class="o">))}</span>
</span><span class='line'>    <span class="k">catch</span>   <span class="o">{</span> <span class="k">case</span> <span class="n">e</span> <span class="k">=&gt;</span>  <span class="k">throw</span> <span class="k">new</span> <span class="n">connectionExecption</span><span class="o">(</span><span class="n">e</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">finally</span> <span class="o">{</span>  <span class="n">client</span><span class="o">.</span><span class="n">getConnectionManager</span><span class="o">().</span><span class="n">shutdown</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>XML-RPC is a Remote Procedure Calling protocol and the body of an XML-RPC request is formatted using XML. A procedure executes on the AIR server and the value it returns is also formatted in XML. The interface to the AIR server interface uses XML-RPC over HTTP. Sending an XML to update the main balance will be using this class.</p>

<p>5- UpdateBalanceAndDate class : generates an UpdateBalanceAndDate XML request message</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">UpdateBalanceAndDate</span> <span class="o">(</span><span class="n">ubdp</span> <span class="k">:</span><span class="kt">UpdateBalanceAndDateParameter</span><span class="o">)</span>  <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">request</span><span class="k">=</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">methodCall</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">methodName</span><span class="o">&gt;</span><span class="nc">UpdateBalanceAndDate</span><span class="o">&lt;/</span><span class="n">methodName</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">params</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">param</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="n">struct</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">originNodeType</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;{</span><span class="n">ubdp</span><span class="o">.</span><span class="n">originNodeType</span><span class="o">}&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">originHostName</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;{</span><span class="n">ubdp</span><span class="o">.</span><span class="n">originHostName</span><span class="o">}&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">originTransactionID</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;{</span><span class="n">ubdp</span><span class="o">.</span><span class="n">originTransactionID</span><span class="o">}&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">originTimeStamp</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="n">dateTime</span><span class="o">.</span><span class="n">iso8601</span><span class="o">&gt;{</span><span class="n">ubdp</span><span class="o">.</span><span class="n">dateTime</span><span class="o">}&lt;/</span><span class="n">dateTime</span><span class="o">.</span><span class="n">iso8601</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">subscriberNumber</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;{</span><span class="n">ubdp</span><span class="o">.</span><span class="n">subscriberNumber</span><span class="o">}&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">transactionCurrency</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;{</span><span class="n">ubdp</span><span class="o">.</span><span class="n">transactionCurrency</span><span class="o">}&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span><span class="n">adjustmentAmountRelative</span><span class="o">&lt;/</span><span class="n">name</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;{</span><span class="n">ubdp</span><span class="o">.</span><span class="n">amount</span><span class="o">}&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
</span><span class='line'>                  <span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;/</span><span class="n">member</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;/</span><span class="n">struct</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;/</span><span class="n">value</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="n">param</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;/</span><span class="n">params</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">methodCall</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>6- UpdateBalanceAndDate companion object is used to parse response and validate the transaction</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">UpdateBalanceAndDate</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@throws</span> <span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">ClientProtocolException</span><span class="o">])</span>
</span><span class='line'>  <span class="nd">@throws</span> <span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">IOException</span><span class="o">])</span>
</span><span class='line'>  <span class="k">def</span>  <span class="n">getResponse</span><span class="o">(</span><span class="n">response</span><span class="k">:</span><span class="kt">HttpResponse</span> <span class="o">)</span><span class="k">:</span><span class="kt">Int</span><span class="o">=</span>  <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">entity</span> <span class="k">=</span> <span class="n">response</span><span class="o">.</span><span class="n">getEntity</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">entity</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">s</span> <span class="k">=</span> <span class="nc">EntityUtils</span><span class="o">.</span><span class="n">toString</span><span class="o">(</span><span class="n">entity</span><span class="o">)</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">elem</span> <span class="k">=</span>  <span class="nc">XML</span><span class="o">.</span><span class="n">loadString</span><span class="o">(</span><span class="n">s</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">val</span> <span class="n">tuple</span><span class="k">=</span>   <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">x</span> <span class="k">&lt;-</span> <span class="o">(</span><span class="n">elem</span> <span class="o">\\</span> <span class="s">&quot;member&quot;</span><span class="o">)</span>
</span><span class='line'>          <span class="n">name</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">\</span> <span class="s">&quot;name&quot;</span> <span class="o">)</span> <span class="o">.</span><span class="n">text</span>
</span><span class='line'>          <span class="n">code</span> <span class="k">=</span> <span class="o">(</span> <span class="n">x</span>  <span class="o">\</span> <span class="s">&quot;value&quot;</span>  <span class="o">\</span> <span class="s">&quot;i4&quot;</span> <span class="o">).</span><span class="n">text</span>  <span class="k">if</span><span class="o">(</span><span class="n">name</span> <span class="o">==</span> <span class="s">&quot;responseCode&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">yield</span> <span class="o">(</span><span class="n">code</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">tuple</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>  <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">tuple</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">toInt</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="nc">RESPONSE_PARSE_EXCEPTION</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span> <span class="k">return</span> <span class="nc">NULL_RESPONSE</span>  <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>  <span class="k">return</span>  <span class="nc">UNEXCEPTED_ERROR_WHILE_PARSE_RESPONSE</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>7- UpdateBalanceAndDateController controlleur class orchestrate requests and utilities class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">UpdateBalanceAndDateController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">update</span><span class="o">(</span><span class="n">inp</span><span class="k">:</span> <span class="kt">InParameters</span><span class="o">,</span> <span class="n">ubdp</span> <span class="k">:</span> <span class="kt">UpdateBalanceAndDateParameter</span> <span class="o">)</span><span class="k">:</span><span class="kt">Int</span><span class="o">={</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">c</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">XmlRpcHttpClient</span><span class="o">(</span><span class="n">inp</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">ubd</span> <span class="k">=</span> <span class="k">new</span>  <span class="nc">UpdateBalanceAndDate</span> <span class="o">(</span><span class="n">ubdp</span><span class="o">)</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">rep</span><span class="k">=</span>  <span class="n">c</span> <span class="n">execute</span><span class="o">(</span><span class="n">ubd</span><span class="o">.</span><span class="n">request</span><span class="o">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nc">UpdateBalanceAndDate</span><span class="o">.</span><span class="n">getResponse</span><span class="o">(</span><span class="n">rep</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">}</span><span class="k">catch</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">e</span><span class="k">:</span><span class="kt">connectionExecption</span> <span class="o">=&gt;</span> <span class="k">return</span> <span class="nc">AIR_EXCEPTION</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">e</span> <span class="k">=&gt;</span>  <span class="k">return</span> <span class="nc">UNEXPECTED_CONNECTION__EXCEPTION</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>


<p>Create XML message and parse it using scala is like a baby toy and makes using UCIP protocol easier and simpler. This sample can be generalized to the other UCIP messages like GetBalanceAndDate or GetAccountDetails and any other XML-RPC communication.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending an Email using the JavaMail Session and Glassfish]]></title>
    <link href="http://ouertani.github.com/blog/2012/06/28/sending-an-email-using-the-javamail-session-and-glassfish/"/>
    <updated>2012-06-28T02:18:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2012/06/28/sending-an-email-using-the-javamail-session-and-glassfish</id>
    <content type="html"><![CDATA[<h2>Purpose</h2>


<p>This tutorial is a supplement to the article of oracle published <a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/javamail/javamail.html">here</a>.
After reading this later, I decided to share some tips about this EE environment JavaMail api configuration.</p>

<h2>Introduction</h2>


<p>Two years ago, we decided to move to JEE 6 for our enterprise solutions and take a lot of fun with new EJB 3.1 features and annotations. Glassfish has made our lives easier, it was very easy to declare variables using it&#8217;s administration console.
Less complicated than using global resource environment for properties It is also the continuation to this <a href="http://www.jroller.com/articles/jee-6-environmental-enterprise">tricks</a> this tutorial delegate to Glassfish EE server managing mail session.</p>

<h2>Prerequisites</h2>




<ol>Before starting this tutorial, you should:
<li>Fully understand of <a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/javamail/javamail.html">http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/javamail/javamail.html</a></li>
<li>Have access to an SMTP server. You must know the host name, port number, and security settings for your SMTP server. Web mail providers may offer SMTP access, view your email account settings or help to find further information. Be aware that your user name is often your full email address and not just the name that comes before the @ symbol.</li>
<li>Have basic familiarity with Servlets and CDIs (helpful but not required)</li>
</ol>




<h2>Create a Java mail session resource :</h2>




<ol>
To create and JavaMail Session :
<li>start galssfish server</li>
<li>open admin console ( default localhost:4848)</li>
<li>Go to Resources -> JavaMail Sessions -> click new to add new javaMail resource</li>
<li>make sure the following field are filled in :</li>
</ol>


<p>Jndi name : EMailME for example, will be used later on lookup resource :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Resource</span><span class="o">(</span><span class="n">lookup</span> <span class="o">=</span> <span class="s">&quot;EMailME&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">Mail</span> <span class="n">host</span>
</span></code></pre></td></tr></table></div></figure>


<ol start="5">
<li>Default user</li>
<li>Default sender will be used later on mailSession.getProperty(&#8220;mail.from&#8221;)</li>
<li>For secure Mail add this advanced setting :

<ul>
<li>mail.smtp.password : email password</li>
<li>mail.smtp.port : email port</li>
<li>mail.smtp.auth : true </li>
</ul>
</li>
</ol>


<p>This screenshot summarizes all these parameters :</p>

<p><img class="center" src="http://ouertani.github.com/images/mailee.jpg" width="640" height="424" title="Mail EE" alt="images"></p>

<h2>II - Using email Service</h2>


<p>This tutorial is a supplement to oracle one. We will use CDI with the same example.</p>

<ol>
    <li>MailSessionBean Will be a CDI bean with RequestScope</li>
    <li>Inject the full JavaMail Session as resource rather than create it</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Named</span>
</span><span class='line'><span class="nd">@RequestScoped</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailSessionBean</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Resource</span><span class="o">(</span><span class="n">lookup</span> <span class="o">=</span> <span class="s">&quot;EMailME&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Session</span> <span class="n">mailSession</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">to</span><span class="o">,</span> <span class="n">String</span> <span class="n">subject</span><span class="o">,</span> <span class="n">String</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MimeMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MimeMessage</span><span class="o">(</span><span class="n">mailSession</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setFrom</span><span class="o">(</span><span class="k">new</span> <span class="n">InternetAddress</span><span class="o">(</span><span class="n">mailSession</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;mail.from&quot;</span><span class="o">)));</span>
</span><span class='line'>            <span class="n">InternetAddress</span><span class="o">[]</span> <span class="n">address</span> <span class="o">=</span> <span class="o">{</span><span class="k">new</span> <span class="n">InternetAddress</span><span class="o">(</span><span class="n">to</span><span class="o">)};</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setRecipients</span><span class="o">(</span><span class="n">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">,</span> <span class="n">address</span><span class="o">);</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setSentDate</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Transport</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MessagingException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look short !</p>

<ol start="3"><li>EmailServlet remind the same except using @Inject rather than @EJB</li></ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;EmailServlet&quot;</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;/EmailServlet&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">EmailSessionBean</span> <span class="n">emailBean</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'> <span class="o">.........</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'> <span class="o">......</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion :</h2>


<p>Let&#8217;s EE Server manager MailSession for us, keep configuration on server and thanks to Glassfish administration console managing JavaMail Session became easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EE 6 Environmental Enterprise Entries and Glassfish]]></title>
    <link href="http://ouertani.github.com/blog/2012/06/24/ee-6-environmental-enterprise-entries-and-glassfish/"/>
    <updated>2012-06-24T02:55:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2012/06/24/ee-6-environmental-enterprise-entries-and-glassfish</id>
    <content type="html"><![CDATA[<h2>PURPOSE</h2>


<p>This tutorial is a supplement to the article of oracle published <a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/env_entry/env_entry.html.">here</a>. After reading <a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/env_entry/env_entry.html.">this later</a>, I decided to share some tips about this EE environment configuration.</p>

<h2>INTRODUCTION</h2>


<p>Two years ago, we decided to move to JEE 6 for our enterprise solutions and take a lot of fun with new EJB 3.1 features and annotations. Glassfish has made our lives easier, it was very easy to declare variables using it&#8217;s administration console.
Less complicated than using <b>ejb-jar.xml</b> are two methods using Glassfish server and resources :
I- OLD FASHION WITH RESOURCE PER PARAM (SIMILAR TO ORACLE TUTORIAL)</p>

<p>1- Declare an EJB with toBeInjected resource :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">javax.annotation.Resource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.ejb.Stateless</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.ejb.LocalBean</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author slim</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Stateless</span>
</span><span class='line'><span class="nd">@LocalBean</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyEjbBean</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Resource</span><span class="o">(</span><span class="n">lookup</span><span class="o">=</span><span class="s">&quot;resName&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">String</span> <span class="n">toBeInjected</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">////</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 - Open admin console ( localhost:4848 by default ) -> Resources -> Custom Resources -> New -> and fill the informations as below
<img class="center" src="http://ouertani.github.com/images/jndiee1.jpg" width="640" height="424" title="JNDI EE" alt="images"></p>

<p>At first glance, it looks simple and fast forward but problems start after just after a first project.</p>

<p>Problems ! Why ?
We achieved more than 20 variables and some resource names begin to confuse them. I was very hard for our operations team to catch the name of the correct setting and update its value.
It was necessary to group parameters resources into a single resource by project.</p>

<p>NEXT FASHION : GROUPING RESOURCES</p>

<p>In this section I will use scala (similar class can be translated easy to java).</p>

<ol>
<li>First of all, we need to create our single resource class as simple bean</li>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">slim</span><span class="o">.</span><span class="na">ouertani</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Ressource</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">param1</span> <span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">_</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">parma2</span> <span class="o">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">_</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<li>Next, let&#8217;s create a resource factory class :</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">me</span><span class="o">.</span><span class="na">slim</span><span class="o">.</span><span class="na">ouertani</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">RessourceFactory</span> <span class="kd">extends</span> <span class="n">ObjectFactory</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">override</span> <span class="n">def</span> <span class="nf">getObjectInstance</span><span class="o">(</span><span class="nl">obj:</span> <span class="n">Object</span><span class="o">,</span> <span class="nl">name:</span> <span class="n">javax</span><span class="o">.</span><span class="na">naming</span><span class="o">.</span><span class="na">Name</span><span class="o">,</span> <span class="nl">nameCtx:</span> <span class="n">javax</span><span class="o">.</span><span class="na">naming</span><span class="o">.</span><span class="na">Context</span><span class="o">,</span> <span class="nl">environment:</span> <span class="n">Hashtable</span><span class="o">[</span><span class="n">_</span><span class="o">,</span> <span class="n">_</span><span class="o">]):</span> <span class="n">Object</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">ressource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ressource</span><span class="o">();</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">reference</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="na">asInstanceOf</span><span class="o">[</span><span class="n">Reference</span><span class="o">];</span>
</span><span class='line'>    <span class="n">val</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">reference</span><span class="o">.</span><span class="na">getAll</span><span class="o">();</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">attributes</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">val</span> <span class="n">refAddr</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">nextElement</span><span class="o">().</span><span class="na">asInstanceOf</span><span class="o">[</span><span class="n">RefAddr</span><span class="o">];</span>
</span><span class='line'>      <span class="n">init</span><span class="o">(</span><span class="n">ressource</span><span class="o">,</span> <span class="n">refAddr</span><span class="o">.</span><span class="na">getType</span><span class="o">(),</span> <span class="n">refAddr</span><span class="o">.</span><span class="na">getContent</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ressource</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span><span class="o">[</span><span class="k">this</span><span class="o">]</span> <span class="n">def</span> <span class="nf">init</span><span class="o">(</span><span class="nl">ressource:</span> <span class="n">Ressource</span><span class="o">,</span> <span class="nl">tipe:</span> <span class="n">String</span><span class="o">,</span> <span class="nl">content:</span> <span class="n">Object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">tipe</span> <span class="n">match</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;param1&quot;</span> <span class="o">=&gt;</span> <span class="n">ressource</span><span class="o">.</span><span class="na">param1</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="s">&quot;param2&quot;</span> <span class="o">=&gt;</span> <span class="n">ressource</span><span class="o">.</span><span class="na">param2</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The purpose of object factory is to read injectable parameters and populate a resource class</p>

<ol start="3">
<li>Back to Glassfish admininstration console, create a single resource ( see screenshot below) :</li>
<ol>
    <li>Jndi Name => the resource name to be used by project for example
    <li>Resource Type => check second radio button, and fill the resource full name ( with package)
    <li>Factory class => Our RessourceFactory class full name ( with package)
    <li>Add two (or more) properties to be injected in our resource class.</ol>
<img class="center" src="http://ouertani.github.com/images/jndiee2.jpg" width="640" height="424" title="JNDI EE" alt="images">

4- At the end we inject our resource in EJB class :
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Stateless</span>
</span><span class='line'><span class="nd">@LocalBean</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyEjbBean</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Resource</span><span class="o">(</span><span class="n">lookup</span><span class="o">=</span><span class="s">&quot;globalRes&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">var</span> <span class="nl">res:</span><span class="n">Ressource</span><span class="o">=</span> <span class="n">_</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">/// res.param1</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CONCLUSION</p>

<p>Having a single resource per project facilitates business management and thanks to Glassfish administration console managing JNDI became easier.</p>
]]></content>
  </entry>
  
</feed>
