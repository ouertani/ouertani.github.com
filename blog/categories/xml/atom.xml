<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: XML | Ouertani Blog]]></title>
  <link href="http://ouertani.github.com/blog/categories/xml/atom.xml" rel="self"/>
  <link href="http://ouertani.github.com/"/>
  <updated>2013-04-06T20:37:20+02:00</updated>
  <id>http://ouertani.github.com/</id>
  <author>
    <name><![CDATA[Ouertani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XML/RPC driver as JCA Scala connector]]></title>
    <link href="http://ouertani.github.com/blog/2012/09/26/xml-slash-rpc-driver-as-jca-scala-connector/"/>
    <updated>2012-09-26T19:41:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2012/09/26/xml-slash-rpc-driver-as-jca-scala-connector</id>
    <content type="html"><![CDATA[<p>Interoperability and reusability are key features of SOA architecture.</p>

<p>The <a href="http://en.wikipedia.org/wiki/Java_EE_Connector_Architecture">Java EE Connector architecture</a> defines a standard architecture for connecting the Java EE platform to heterogeneous EISs. This article presents an XML/RPC  adapter using a Scala JCA outbound connector to an IN/AIR legacy system.</p>

<!-- more -->


<h2>JCA and integration</h2>


<p><blockquote><p>"For enterprise application integration, bi-directional connectivity between enterprise applications and EIS is essential. The Java EE Connector architecture defines standard contracts that allow bi-directional connectivity between enterprise applications and EISs. It also formalizes the relationships, interactions, and the packaging of the integration layer, thus enabling enterprise application integration."</p></p><p><p></p><footer><strong>JCA 1.6 p 35</strong></footer></blockquote></p>

<p>The connector architecture defines a set of scalable, secure, and transactional mechanisms that enable the integration of EISs with application servers and enterprise application.</p>

<p><img class="center" src="/images/jca.jpg" width="350" height="350" title="JCA" alt="images"></p>

<p>Using a UCIP JCA connector rather than using an <a href="http://java.dzone.com/articles/xml-rpc-using-scala">XML/RPC raw driver</a> lets you:</p>

<ol>
<li>Hide connection complexity.</li>
<li>Use connection pooling and scalability.</li>
<li>Use a standard adapter that can be deployed with any JEE 6 server from an m x n integration problem to an m + n solution</li>
</ol>


<h2>How?</h2>


<p>The use of a <a href="http://www.jcp.org/en/jsr/detail?id=322">JCA</a> resource adapter inside a JEE solution is the same as interacting with a database or queue: protocol communication and wire negotiation... are hidden to the final user.</p>

<p>Two interfaces are presented to a customer:</p>

<h3>1) A factory trait:</h3>


<p><code>scala
trait AirConnectorFactory extends Referenceable with Function0[AirConnector]
</code></p>

<h3>2) The connector trait:</h3>


<p><code>scala
trait AirConnector {
def fire(elem : Elem) : Option[Elem]
}
</code>
As an outbound communication where the resource adapter allows an ESB or EE application server to connect to an IN/AIR node and perform work. All communication is initiated by the application. The Air connector factory should be injected as any resource and used like the following.
``` scala
@Resource(name="AIR")
var airConnectorFactory : AirConnectorFactory = _</p>

<p>val output = airConnectorFactory().fire(input)
```
<blockquote><p>Source code is based on JCA 1.6 specification and hosted on <a href="https://github.com/ouertani/TelcoCX">github</a>.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WSDL integration problem : Two declarations cause a collision]]></title>
    <link href="http://ouertani.github.com/blog/2011/06/30/wsdl-integration-problem-two-declarations-cause-a-collision/"/>
    <updated>2011-06-30T04:10:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2011/06/30/wsdl-integration-problem-two-declarations-cause-a-collision</id>
    <content type="html"><![CDATA[<p>Integration always hides some surprises especially when it comes to old systems where quick solutions aren't the first aid.
In this post, we present a strange and rare situation when requesting WS using an old existing WSDL.</p>

<!-- more -->


<p>To make things simple bellow the wsdl and xsd samples :</p>

<p>OldExistingWsService.wsdl
```xml</p>

<!--?xml version="1.0" encoding="UTF-8"?-->


<!-- Published by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is Metro/2.1-b25 (trunk-6664; 2010-12-31T11:31:15+0000) JAXWS-RI/2.2.3-promoted-b06 JAXWS/2.2. -->


<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is Metro/2.1-b25 (trunk-6664; 2010-12-31T11:31:15+0000) JAXWS-RI/2.2.3-promoted-b06 JAXWS/2.2. -->


<p><definitions xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:wsp1_2="http://schemas.xmlsoap.org/ws/2004/09/policy" xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://ws.jtunisie.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.xmlsoap.org/wsdl/" targetnamespace="http://ws.jtunisie.com/" name="OldExistingWsService"></p>

<pre><code>&lt;types&gt;
    &lt;xsd:schema&gt;
        &lt;xsd:import namespace="http://ws.jtunisie.com/" schemalocation="./OldExistingWsService.xsd"&gt;
    &lt;/xsd:import&gt;&lt;/xsd:schema&gt;
&lt;/types&gt;
&lt;message name="oldOperation"&gt;
    &lt;part name="parameters" element="tns:oldOperation"&gt;
&lt;/part&gt;&lt;/message&gt;
&lt;message name="oldOperationResponse"&gt;
    &lt;part name="parameters" element="tns:oldOperationResponse"&gt;
&lt;/part&gt;&lt;/message&gt;
&lt;porttype name="OldExistingWs"&gt;
    &lt;operation name="oldOperation"&gt;
        &lt;input wsam:action="http://ws.jtunisie.com/OldExistingWs/oldOperationRequest" message="tns:oldOperation"&gt;
        &lt;output wsam:action="http://ws.jtunisie.com/OldExistingWs/oldOperationResponse" message="tns:oldOperationResponse"&gt;
    &lt;/output&gt;&lt;/operation&gt;
&lt;/porttype&gt;
&lt;binding name="OldExistingWsPortBinding" type="tns:OldExistingWs"&gt;
    &lt;soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"&gt;
    &lt;operation name="oldOperation"&gt;
        &lt;soap:operation soapaction=""&gt;
        &lt;input&gt;
            &lt;soap:body use="literal"&gt;

        &lt;output&gt;
            &lt;soap:body use="literal"&gt;
        &lt;/soap:body&gt;&lt;/output&gt;
    &lt;/soap:body&gt;&lt;/soap:operation&gt;&lt;/operation&gt;
&lt;/soap:binding&gt;&lt;/binding&gt;
&lt;service name="OldExistingWsService"&gt;
    &lt;port name="OldExistingWsPort" binding="tns:OldExistingWsPortBinding"&gt;
        &lt;soap:address location="http://ouertani:8080/Wsdlcustomisation/OldExistingWsService"&gt;
    &lt;/soap:address&gt;&lt;/port&gt;
&lt;/service&gt;
</code></pre>

<p></definitions>
<code>
OldExistingWsService.xsd
</code>xml</p>

<!--?xml version="1.0" encoding="UTF-8"?-->


<!-- Published by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is Metro/2.1-b25 (trunk-6664; 2010-12-31T11:31:15+0000) JAXWS-RI/2.2.3-promoted-b06 JAXWS/2.2. -->


<p>&lt;xs:schema xmlns:tns="http://ws.jtunisie.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0" targetnamespace="http://ws.jtunisie.com/"></p>

<pre><code>&lt;xs:element name="oldOperation" type="tns:oldOperation"&gt;

&lt;xs:element name="oldOperationResponse" type="tns:oldOperationResponse"&gt;

&lt;xs:complextype name="oldOperation"&gt;
    &lt;xs:sequence&gt;
        &lt;xs:element name="parameter" type="tns:oldExsistingClass" minoccurs="0"&gt;
    &lt;/xs:element&gt;&lt;/xs:sequence&gt;
&lt;/xs:complextype&gt;

&lt;xs:complextype name="oldExsistingClass"&gt;
    &lt;xs:sequence&gt;
        &lt;xs:element name="a" type="xs:int"&gt;
        &lt;xs:element name="_a" type="xs:int"&gt;
    &lt;/xs:element&gt;&lt;/xs:element&gt;&lt;/xs:sequence&gt;
&lt;/xs:complextype&gt;

&lt;xs:complextype name="oldOperationResponse"&gt;
    &lt;xs:sequence&gt;
        &lt;xs:element name="return" type="xs:int"&gt;
    &lt;/xs:element&gt;&lt;/xs:sequence&gt;
&lt;/xs:complextype&gt;
</code></pre>

<p>&lt;/xs:element>&lt;/xs:element>&lt;/xs:schema>
```
trying to generate java client code from this wsdl will causes : <b>(wsdl2java.sh -client -d . -verbose OldExistingWsService.wsdl)</b></p>

<p style="color:red;">
 <blockquote><p>org.apache.cxf.tools.common.ToolException: Thrown by JAXB: Two declarations cause a collision in the ObjectFactory class. at line 17 column 1 of schema file:/OldExistingWsService.xsd</p></blockquote>
</p>


<p>The problem is where a and _a are generate the same property, getter and setter methods names which generate exception.</p>

<ol>By quick solution, I means :
<li>tell cxf to resolve name collision with : -autoNameResolution command line argument</li>
<li>tell jaxb to not remove underscores with : <a href="http://stackoverflow.com/questions/2163719/tell-jaxb-to-not-remove-underscores">jaxb:globalBindings underscoreBinding="asCharInWord"</a></li>
</ol>


<p>As these tricks doesn't work for the current case, hands on dirty jaxb binding customization :
```
&lt;jxb:bindings version="2.0" xmlns:jxb="http://java.sun.com/xml/ns/jaxb" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  &lt;jxb:bindings schemalocation="file:OldExistingWsService.xsd" node="/xs:schema"></p>

<pre><code>&lt;jxb:bindings node=".//xs:element[@name='_a']"&gt;
 &lt;jxb:property name="oldA"&gt;&lt;/jxb:property&gt;
&lt;/jxb:bindings&gt;
</code></pre>

<p> &lt;/jxb:bindings>
&lt;/jxb:bindings>
```
And tell :
 <blockquote><p>wsdl2java.sh -client -d . -verbose -b binding.xsd OldExistingWsService.wsdl</p></blockquote></p>

<p>Note : to deal with old wsdl I used this schema bindings :
```xml
&lt;jaxws:bindings xmlns:jxb="http://java.sun.com/xml/ns/jaxb" xmlns="http://java.sun.com/xml/ns/jaxws" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:jaxws="http://java.sun.com/xm
l/ns/jaxws" wsdllocation="test.wsdl" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns1="VOLARISWS"></p>

<pre><code>&lt;jaxws:schemabindings&gt;
    &lt;jaxws:bindings node="wsdl:definitions"&gt;
        &lt;jaxws:bindings node=".//xs:element[@name='_a']"&gt;
            &lt;jxb:property name="oldA"&gt;&lt;/jxb:property&gt;
        &lt;/jaxws:bindings&gt;
    &lt;/jaxws:bindings&gt;
&lt;/jaxws:schemabindings&gt;
</code></pre>

<p>&lt;/jaxws:bindings>
```
thanks for patience.</p>
]]></content>
  </entry>
  
</feed>
