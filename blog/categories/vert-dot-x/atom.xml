<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vert.x | Ouertani Blog]]></title>
  <link href="http://ouertani.github.com/blog/categories/vert-dot-x/atom.xml" rel="self"/>
  <link href="http://ouertani.github.com/"/>
  <updated>2013-04-01T02:50:19+02:00</updated>
  <id>http://ouertani.github.com/</id>
  <author>
    <name><![CDATA[Ouertani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rest with Scala and Vert.x]]></title>
    <link href="http://ouertani.github.com/blog/2013/03/09/rest-with-scala-and-vert-dot-x/"/>
    <updated>2013-03-09T00:24:00+01:00</updated>
    <id>http://ouertani.github.com/blog/2013/03/09/rest-with-scala-and-vert-dot-x</id>
    <content type="html"><![CDATA[<p>A previous post introduced some features of using Scala with <a href="http://vertx.io/">Vert.x</a>. This post covers how to publish Rest web services in an elegant and simple fashion.</p>

<p>As in the previous post, Examples in Java and Scala are presented, source code been hosted on GitHub as part of lang-scala <a href="https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala">https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala</a></p>

<!-- more -->




<h2>I- Resticle</h2>


<p>Resticle is a unit of deployment dedicated to Rest. It provides a new method (“handles”) which can be used by Vert.x to start Rest services. “handles” returns a sequence of rest handlers :</p>

<ul>
<li>RestHandler : Action => Response</li>
<li><ul>Action :
<li>GET(pattern : String)</li>
<li>POST (pattern : String)</li>
<li>PUT (pattern : String)</li>
<li>DELETE(pattern : String)</li>
<li>HEAD (pattern : String)</li>
<li>ALL(pattern : String)</li>
</ul></li>
<li>Response : HttpServerRequest => Any</li>
<li>OK, Unauthorized,....</li>
</ul>


<p>In this tutorial we will be working with the SampleResticle class, for both scala and java.</p>

<h2>II - Hello World</h2>


<p>Vert.x provides a powerful routing and <a href="http://vertx.io/core_manual_java.html#routing-http-requests-with-pattern-matching">route matching</a> mechanism, which simplifies the routing of HTTP requests to different handlers based on pattern matching on the request path.</p>

<p>In Hello World snippet, let us publish a static GET service :</p>

<p><li>GET : /hello → code : 200 , body : world</li></p>

<h4>Scala</h4>


<p>``` scala   SampleResticle.scala  <br/>
class SampleResticle extends Resticle
{
  override def handles =</p>

<pre><code>     { GET("/hello")      :&gt;  OK( _ =&gt; "world ") }
</code></pre>

<p>}
```</p>

<h4>Java</h4>


<p> <br/>
``` java    SampleResticle.java       <br/>
public class SampleResticle extends Verticle {</p>

<pre><code>public void start() {
    HttpServer server = vertx.createHttpServer();
    RouteMatcher routeMatcher = new RouteMatcher();
    routeMatcher.get("/hello", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =200;
            req.response.end("world");
        }
    });
    server.requestHandler(routeMatcher).listen(8080, "localhost");
}
</code></pre>

<p>}
```</p>

<h2>III- Chaining Handlers</h2>


<p>Using Resticle we can chain handlers quit easily. The following snippets create static GET and DELETE services :</p>

<p><li>GET : /hello → code : 200 , body : world</li>
<li>DELETE : /posts → code : 401 , body : Not allowed user</li></p>

<h4>Scala</h4>


<p>``` scala   SampleResticle.scala              <br/>
class SampleResticle extends Resticle
{
  override def handles =</p>

<pre><code>     { GET("/hello")      :&gt;  OK( _ =&gt; "world ") } ++
     { DELETE("/posts")   :&gt;  Unauthorized {_ =&gt; "Not allowed user" }} 
</code></pre>

<p>}
```</p>

<h4>java</h4>


<p>``` java    SampleResticle.java           <br/>
public class SampleResticle extends Verticle {</p>

<pre><code>public void start() {
    HttpServer server = vertx.createHttpServer();
    RouteMatcher routeMatcher = new RouteMatcher();
    routeMatcher.get("/hello", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =200;
            req.response.end("world");
        }
    });
     routeMatcher.delete("/posts", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =401;
            req.response.end("Not allowed user");
        }
    });
    server.requestHandler(routeMatcher).listen(8080, "localhost");
}
</code></pre>

<p>}
```</p>

<h2>IV - Value path</h2>


<p>Vert.x <a href="http://vertx.io/core_manual_java.html#routing-http-requests-with-pattern-matching">pattern matching</a> lets you extract values from the path and use them as parameters in the request.</p>

<p><li>GET : /hello → code : 200 , body : world</li>
<li>DELETE : /posts → code : 401 , body : Not allowed user</li>
<li>POST : /:blogname → code : 200 , body : post {blogname} received !</li></p>

<h4>Scala : ( Using <a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">String interpolation</a>)</h4>


<p>``` scala   SampleResticle.scala              <br/>
class SampleResticle extends Resticle
{
  override def handles =</p>

<pre><code>     { GET("/hello")      :&gt;  OK( _ =&gt; "world ") } ++
     { DELETE("/posts")   :&gt;  Unauthorized {_ =&gt; "Not allowed user" }} ++
     { POST("/:blogname") :&gt;  OK {req  =&gt; val param = req.params().get("blogname") ; s"post $param received !" } }
</code></pre>

<p>}
```</p>

<h4>Java</h4>


<p>``` java    SampleResticle.java           <br/>
public class SampleResticle extends Verticle {</p>

<pre><code>public void start() {
    HttpServer server = vertx.createHttpServer();
    RouteMatcher routeMatcher = new RouteMatcher();
    routeMatcher.get("/hello", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =200;
            req.response.end("world");
        }
    });
     routeMatcher.delete("/posts", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =401;
            req.response.end("Not allowed user");
        }
    });

     routeMatcher.post("/:blogname", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =200;
            String blogName = req.params().get("blogname");
            req.response.end("post "+blogName+ " received !");
        }
    });

    server.requestHandler(routeMatcher).listen(8080, "localhost");
}
</code></pre>

<p>}
```</p>

<h2>V- Json</h2>


<p>Let’s assume we have a Blog class with two String fields title and content :</p>

<p>case class Blog (title :String , content : String)
The java equivalent has been relocated to the end of the document due to its verbosity ;).</p>

<p>Publishing an object using Resticle is simple and transparent due to implicit convertor : T => Buffer.</p>

<h4>Scala ( Type Class)</h4>


<p><code>scala   Blog.scala  
object Blog {
  implicit def toBuffer(blog : Blog):Buffer = JsonObject.withString("title" -&gt; blog.title).withString("content" -&gt; blog.content)
}
</code></p>

<h4>Java ( with explicit convertor )</h4>


<p>``` java    Convertor.java            <br/>
public class Convertor {</p>

<pre><code>public static  JsonObject toJson(Blog blog) {
   return new JsonObject().putString("title", blog.getTitle()).putString("content", blog.getContent());
} 
</code></pre>

<p>}
```
<li>GET : /hello → code : 200 , body : world</li>
<li>DELETE : /posts → code : 401 , body : Not allowed user</li>
<li>POST : /:blogname → code : 200 , body : post {blogname} received !</li>
<li>GET : /:id → code : 200 , body : {"title":"rest","content":"scala &amp; vertx"}</li></p>

<h4>Scala</h4>


<p>``` scala   SampleResticle.scala              <br/>
class SampleResticle extends Resticle
{
  override def handles =</p>

<pre><code>     { GET("/hello")      :&gt;  OK( _ =&gt; "world ") } ++
     { DELETE("/posts")   :&gt;  Unauthorized {_ =&gt; "Not allowed user" }} ++
     { POST("/:blogname") :&gt;  OK {req  =&gt; val param = req.params().get("blogname") ; s"post $param received !" } } ++
     { GET("/:id")        :&gt;  OK ( _ =&gt; Blog("rest","scala &amp; vertx"))}
</code></pre>

<p>}
```</p>

<h4>Java</h4>


<p>``` java    SampleResticle.java           <br/>
public class SampleResticle extends Verticle {</p>

<pre><code>public void start() {
    HttpServer server = vertx.createHttpServer();
    RouteMatcher routeMatcher = new RouteMatcher();
    routeMatcher.get("/hello", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =200;
            req.response.end("world");
        }
    });
     routeMatcher.delete("/posts", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =401;
            req.response.end("Not allowed user");
        }
    });

     routeMatcher.post("/:blogname", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =200;
            String blogName = req.params().get("blogname");
            req.response.end("post "+blogName+ " received !");
        }
    });

    routeMatcher.get("/:id", new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest req) {
            req.response.statusCode =200;
            Blog blog =  new Blog("rest","scala &amp; vertx");
            JsonObject obj = Convertor.toJson(blog);
            req.response.end(obj.encode());
        }
    });

    server.requestHandler(routeMatcher).listen(8080, "localhost");
}
</code></pre>

<p>}
```
Java Blog</p>

<p>``` java    Blog.java             <br/>
public class Blog {</p>

<pre><code>private final  String title;
private final String content;

public Blog(String title, String content) {
    this.title = title;
    this.content = content;
}

public String getTitle() {
    return title;
}

public String getContent() {
    return content;
}
</code></pre>

<p>  }
```</p>

<h2>Conclusion</h2>


<p>Despite the fact that Resticle is in first development step, Rest support is by far simpler and elegant in scala than in java. As described in first tutorial Vert.x java version is burdened with a frightening number of handlers. Will Vert.x 2.0 address this point using <a href="https://github.com/vert-x/vert.x/wiki/Vert.x-2.0-plan">Promises/Deferred APIs </a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun with Scala and Vert.x]]></title>
    <link href="http://ouertani.github.com/blog/2013/02/12/fun-with-scala-and-vert-dot-x/"/>
    <updated>2013-02-12T18:43:00+01:00</updated>
    <id>http://ouertani.github.com/blog/2013/02/12/fun-with-scala-and-vert-dot-x</id>
    <content type="html"><![CDATA[<p><a href="http://vertx.io/">Vert.x</a> is a polyglot event-driven application framework that runs on the Java Virtual Machine (JAVA 7 is the minimum supported version). Like Node.js, Vert.x is asynchronous and scalable, and lets developers build modern and effective web applications.</p>

<p>Being polyglot, Vert.x can be used in many flavors, among which : JavaScript,CoffeeScript, Ruby, Python,Groovy and Java. In order to enforce asynchronism and scalabity, Vert.x is built upon <a href="https://netty.io/">Netty</a>, leverage the <a href="http://en.wikipedia.org/wiki/Reactor_pattern">reactor pattern</a>, using a frightening number of handlers.</p>

<p>This article aims at showing the powerful combination of Scala and Vert.x - the Java counterpart being provided as comparison.</p>

<p>Note : the source code are hosted on GitHub as part of lang-scala <a href="https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala">https://github.com/ouertani/vert.x/tree/master/vertx-lang/vertx-lang-scala</a></p>

<p>Vert.x supports many components :</p>

<p><li><a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a></li>
<li>HttpServer</li>
<li>Distributed Event Bus</li>
<li>TCP Server, SockJS ,... not presented here</li></p>

<h2>I - WebSocket</h2>


<p>Web Socket are HTML 5 feature providing full-duplex communications. For old browsers that do not support WebSocket, Vert.x provides <a href="https://github.com/sockjs/sockjs-client">SockJS</a> as out-of-the-box component.</p>

<p>In order to run the following example check out : <a href="https://github.com/ouertani/vert.x/blob/master/vertx-examples/src/main/javascript/websockets/ws.html">https://github.com/ouertani/vert.x/blob/master/vertx-examples/src/main/javascript/websockets/ws.html</a> and save it into the compiled lib directory</p>

<h4>Java</h4>


<p>``` java SampleWebSocket.java
import org.vertx.java.core.Handler;
import org.vertx.java.core.buffer.Buffer;
import org.vertx.java.core.http.HttpServerRequest;
import org.vertx.java.core.http.ServerWebSocket;
import org.vertx.java.deploy.Verticle;</p>

<p>public class SampleWebSocket extends Verticle {</p>

<p>  public void start() {</p>

<pre><code>vertx.createHttpServer().websocketHandler(new Handler&lt;ServerWebSocket&gt;() {
  public void handle(final ServerWebSocket ws) {
    if (ws.path.equals("/myapp")) {
      ws.dataHandler(new Handler&lt;Buffer&gt;() {
        public void handle(Buffer data) {
          ws.writeTextFrame(data.toString()); // Echo it back
        }
      });
    } else {
      ws.reject();
    }
  }
}).requestHandler(new Handler&lt;HttpServerRequest&gt;() {
  public void handle(HttpServerRequest req) {
    if (req.path.equals("/")) req.response.sendFile("ws.html"); // Serve the html
  }
}).listen(8080);
</code></pre>

<p>  }
}
```</p>

<h4>Scala</h4>


<p>``` scala SampleWebSocket.scala
import org.vertx.java.core.buffer.Buffer;
import org.vertx.java.core.http.HttpServerRequest;
import org.vertx.java.core.http.ServerWebSocket;
import org.vertx.scala.deploy.Verticle
import org.vertx.scala.core._</p>

<p>class SampleWebSocket extends Verticle (
  _.getVertx().createHttpServer().websocketHandler{</p>

<pre><code> ws:ServerWebSocket =&gt; ws.path match {
    case "/myapp" =&gt; ws.dataHandler{data : Buffer =&gt;   ws.writeTextFrame(data.toString())}
    case _ =&gt; ws.reject();
  }}
  .requestHandler{req : HttpServerRequest =&gt; req.path match {case ("/") =&gt; req.response.sendFile("ws.html")}}
  .listen(8080)
</code></pre>

<p>)()
```</p>

<h2>II-HttpWebServer</h2>


<p>Vert.x allows you to easily write full featured, highly performant and scalable HTTP and HTTPS servers.</p>

<p>The following example starts up an Http server, listening on port 8080, and logging all received requests.</p>

<h4>Java</h4>


<p>``` java SampleHttpWebServer.java
import org.vertx.java.core.Handler;
import org.vertx.java.core.http.HttpServer;
import org.vertx.java.core.http.HttpServerRequest;
import org.vertx.java.core.logging.Logger;
import org.vertx.java.deploy.Verticle;</p>

<p>public class SampleHttpWebServer extends Verticle {</p>

<pre><code>public void start() {
    HttpServer server = vertx.createHttpServer();
    final Logger log = getContainer().getLogger();
    server.requestHandler(new Handler&lt;HttpServerRequest&gt;() {
        public void handle(HttpServerRequest request) {
            log.info("A request has arrived on the server!");
        }
    }).listen(8080, "localhost");
}
</code></pre>

<p>}
```</p>

<h4>Scala</h4>


<p>``` scala SampleWebServer.scala
import org.vertx.java.core.http. { HttpServerRequest => JHttpServerRequest}
import org.vertx.scala.deploy.Verticle
import org.vertx.scala.core._</p>

<p>class SampleWebServer extends Verticle ( x =>
  x.getVertx().createHttpServer().withRequestHandler{_ : JHttpServerRequest =></p>

<pre><code> x.info("A request has arrived on the server!")}
</code></pre>

<p>.listen(8080, "localhost")
)()
```</p>

<h2>III-HttpClient</h2>


<p>Vert.x also provides an HttpClient API, so as to interact with the server part. The following samples create and send a GET request, then log the server's response.</p>

<h4>Java</h4>


<p>``` java SampleHttpClient.java
import org.vertx.java.core.Handler;
import org.vertx.java.core.http.HttpClient;
import org.vertx.java.core.http.HttpClientRequest;
import org.vertx.java.core.http.HttpClientResponse;
import org.vertx.java.core.logging.Logger;
import org.vertx.java.deploy.Verticle;</p>

<p>public class SampleHttpClient extends Verticle {</p>

<pre><code>@Override
public void start() throws Exception {
    HttpClient client = vertx.createHttpClient().setHost("127.0.0.1");
    final Logger log = getContainer().getLogger();

    HttpClientRequest request = client.post("/some-path/", new Handler&lt;HttpClientResponse&gt;() {
        public void handle(HttpClientResponse resp) {
            log.info("Got a response: ");
        }
    });

    request.end();
}
</code></pre>

<p>}
```</p>

<h4>Scala</h4>


<p>``` scala SampleWebClient.scala
import org.vertx.scala.deploy.Verticle
import org.vertx.scala.core._</p>

<p>class SampleWebClient extends Verticle (v =>
   v.getVertx.createHttpClient().setHost("127.0.0.1").setPort(8080)
   .andGetNow("/") {_ => v.info("Got a response: " )}
  )()
```</p>

<h2>IV-EventBus</h2>


<p>The event bus is like a vertebral spine, it can be used to connect distributed nodes, and to support interaction between different Verticles, even written in different languages.</p>

<h4>Java</h4>


<p>``` java SampleEventBus.java
import org.vertx.java.deploy.Verticle;
import org.vertx.java.core.eventbus.EventBus;</p>

<p>public class SampleEventBus extends Verticle {
   @Override</p>

<pre><code>public void start() throws Exception {
   EventBus eb = vertx.eventBus();
   eb.send("path", "ping1");
   eb.send("path", "ping2");
</code></pre>

<p>   }<br/>
}
```</p>

<h4>Scala</h4>


<p><code>scala SampleEventBus.scala
import org.vertx.scala.deploy.Verticle
import org.vertx.scala.core._
class SampleEventBus extends Verticle ( x =&gt; {
 val  point = x ! ("path")
 point &gt;&gt; ("ping 1")
 point &gt;&gt; ("ping 2")
}
)()
</code></p>

<h2>Conclusion</h2>


<p>This article introduced the basic of Vert.x using scala language and short examples. Full Scala language support will soon, hopefully, become available.</p>

<p>Stay tuned, a subsequent post will show you more about Vert.x with Scala.</p>

<p>source : http://blog.zenika.com/index.php?post/2013/02/11/fun-with-scala-and-vert-x</p>
]]></content>
  </entry>
  
</feed>
