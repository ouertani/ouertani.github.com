<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JCA | Ouertani Blog]]></title>
  <link href="http://ouertani.github.com/blog/categories/jca/atom.xml" rel="self"/>
  <link href="http://ouertani.github.com/"/>
  <updated>2013-04-01T01:41:58+02:00</updated>
  <id>http://ouertani.github.com/</id>
  <author>
    <name><![CDATA[Ouertani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XML/RPC driver as JCA Scala connector]]></title>
    <link href="http://ouertani.github.com/blog/2012/09/26/xml-slash-rpc-driver-as-jca-scala-connector/"/>
    <updated>2012-09-26T19:41:00+02:00</updated>
    <id>http://ouertani.github.com/blog/2012/09/26/xml-slash-rpc-driver-as-jca-scala-connector</id>
    <content type="html"><![CDATA[<p>Interoperability and reusability are key features of SOA architecture.</p>

<p>The <a href="http://en.wikipedia.org/wiki/Java_EE_Connector_Architecture">Java EE Connector architecture</a> defines a standard architecture for connecting the Java EE platform to heterogeneous EISs. This article presents an XML/RPC  adapter using a Scala JCA outbound connector to an IN/AIR legacy system.</p>

<h2>JCA and integration</h2>


<p><blockquote><p>"For enterprise application integration, bi-directional connectivity between enterprise applications and EIS is essential. The Java EE Connector architecture defines standard contracts that allow bi-directional connectivity between enterprise applications and EISs. It also formalizes the relationships, interactions, and the packaging of the integration layer, thus enabling enterprise application integration."</p></p><p><p></p><footer><strong>JCA 1.6 p 35</strong></footer></blockquote></p>

<p>The connector architecture defines a set of scalable, secure, and transactional mechanisms that enable the integration of EISs with application servers and enterprise application.</p>

<p><img class="center" src="/images/jca.jpg" width="350" height="350" title="JCA" alt="images"></p>

<p>Using a UCIP JCA connector rather than using an <a href="http://java.dzone.com/articles/xml-rpc-using-scala">XML/RPC raw driver</a> lets you:</p>

<ol>
<li>Hide connection complexity.</li>
<li>Use connection pooling and scalability.</li>
<li>Use a standard adapter that can be deployed with any JEE 6 server from an m x n integration problem to an m + n solution</li>
</ol>


<h2>How?</h2>


<p>The use of a <a href="http://www.jcp.org/en/jsr/detail?id=322">JCA</a> resource adapter inside a JEE solution is the same as interacting with a database or queue: protocol communication and wire negotiation... are hidden to the final user.</p>

<p>Two interfaces are presented to a customer:</p>

<h3>1) A factory trait:</h3>


<p><code>scala
trait AirConnectorFactory extends Referenceable with Function0[AirConnector]
</code></p>

<h3>2) The connector trait:</h3>


<p><code>scala
trait AirConnector {
def fire(elem : Elem) : Option[Elem]
}
</code>
As an outbound communication where the resource adapter allows an ESB or EE application server to connect to an IN/AIR node and perform work. All communication is initiated by the application. The Air connector factory should be injected as any resource and used like the following.
``` scala
@Resource(name="AIR")
var airConnectorFactory : AirConnectorFactory = _</p>

<p>val output = airConnectorFactory().fire(input)
```
<blockquote><p>Source code is based on JCA 1.6 specification and hosted on <a href="https://github.com/ouertani/TelcoCX">github</a>.</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
